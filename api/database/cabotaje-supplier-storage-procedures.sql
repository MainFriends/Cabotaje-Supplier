/* CABOTAJE SUPPLER STORAGE PROCEDURES */

-- SP PARA VERIFICAR LOGUEO
DELIMITER //
CREATE PROCEDURE SP_LOGIN(IN
							_USER_EMAIL VARCHAR(255)
)BEGIN

	SET @USER = (SELECT COUNT(COD_USER) FROM LOGIN WHERE USER_EMAIL = _USER_EMAIL);
	
    IF @USER >= 1 THEN
		SELECT USER.COD_USER, COD_ROLE, FIRST_NAME, LAST_NAME, USER_PASSWORD, DAT_EXP, COD_STATUS, NUM_ATTEMPS FROM USER, LOGIN
        WHERE USER.COD_USER = LOGIN.COD_USER
        AND USER_EMAIL = _USER_EMAIL;
	ELSE
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El email o contraseña son incorrectos.';
    END IF;
END
//

/*###### MODULO DE VENTAS #####*/

-- INSERT EN LA TABLA `FACTURAS DE VENTA`
DELIMITER //
CREATE PROCEDURE SP_INS_SALE_INVOICE(IN 
						_COD_CLIENT BIGINT,
                        _COD_USER BIGINT,
                        _SUBTOTAL DECIMAL(10,2),
                        _TOT_DISCOUNT DECIMAL(10,2),
                        _TOT_ISV DECIMAL(10,2),
                        _TOT_SALE DECIMAL(10,2),
                        _TYP_TO_SALE ENUM('Crédito', 'Contado'),
                        _COD_TYP_PAY BIGINT,
                        _DESCRIPTION TEXT,
                        _DAT_LIMIT DATE,
                        _AMOUNT DECIMAL(10,2)
)BEGIN
	-- INSERTAR EN LA TABLA DE FACTURA
    INSERT INTO SALES_INVOICE(COD_CLIENT, COD_USER, SUBTOTAL, TOT_DISCOUNT, TOT_ISV, TOT_SALE, TYP_TO_SALE, COD_TYP_PAY, DAT_INVOICE)
    VALUES(_COD_CLIENT, _COD_USER, _SUBTOTAL, _TOT_DISCOUNT, _TOT_ISV, _TOT_SALE, _TYP_TO_SALE, _COD_TYP_PAY, CURDATE());
    
    -- OBTENEMOS LA ULTIMA FACTURA
    SET @COD = (SELECT MAX(COD_INVOICE) FROM SALES_INVOICE);
    
    -- INSERTAR DESCUENTO TOTAL
    INSERT INTO SALES_DISCOUNTS(COD_INVOICE, DESCRIPTION, AMOUNT)
    VALUES(@COD, 'Descuento sobre ventas', _TOT_DISCOUNT);
    
    SET @STARTING_AMOUNT = _TOT_SALE - _AMOUNT;
    
        -- INSERTAR CUENTAS POR COBRAR
    IF _TYP_TO_SALE = 'Crédito' THEN
     INSERT INTO ACCOUNTS_RECEIVABLE(COD_INVOICE, DESCRIPTION, TOT_BALANCE, DAT_LIMIT, STARTING_AMOUNT)
     VALUES(@COD, _DESCRIPTION, @STARTING_AMOUNT, _DAT_LIMIT, @STARTING_AMOUNT);
    END IF;
END;
//

-- CONSULTA EN LA TABLA DE 'FACTURAS DE VENTA'
DELIMITER //
CREATE PROCEDURE SP_SEL_SALES_INVOICE(
									IN _COD_INVOICE BIGINT
)
BEGIN
	IF _COD_INVOICE = 0 THEN
		SELECT COD_INVOICE, CONCAT(CLIENT.FIRST_NAME, ' ', CLIENT.LAST_NAME) CLIENT, 
		CONCAT(USER.FIRST_NAME, ' ', USER.LAST_NAME) USER_NAME,
		SUBTOTAL, TOT_DISCOUNT, TOT_ISV, TYP_TO_SALE, NAM_TYPE_PAY, DAT_INVOICE, TOT_SALE
		FROM CLIENT, USER, SALES_INVOICE, TYPE_TO_PAY
		WHERE CLIENT.COD_CLIENT = SALES_INVOICE.COD_CLIENT
		AND USER.COD_USER = SALES_INVOICE.COD_USER
		AND TYPE_TO_PAY.COD_TYP_PAY = SALES_INVOICE.COD_TYP_PAY;
	ELSE
		SELECT COD_INVOICE, CONCAT(CLIENT.FIRST_NAME, ' ', CLIENT.LAST_NAME) CLIENT, 
		CONCAT(USER.FIRST_NAME, ' ', USER.LAST_NAME) USER_NAME,
		SUBTOTAL, TOT_DISCOUNT, TOT_ISV, TYP_TO_SALE, NAM_TYPE_PAY, DAT_INVOICE, TOT_SALE
		FROM CLIENT, USER, SALES_INVOICE, TYPE_TO_PAY
		WHERE CLIENT.COD_CLIENT = SALES_INVOICE.COD_CLIENT
		AND USER.COD_USER = SALES_INVOICE.COD_USER
		AND TYPE_TO_PAY.COD_TYP_PAY = SALES_INVOICE.COD_TYP_PAY
        AND COD_INVOICE = _COD_INVOICE;
	END IF;
END
//

-- INSERT EN LA TABLA `DETALLE DE VENTA`
DELIMITER //
CREATE PROCEDURE SP_INS_SALE_DETAIL(IN 
                        _COD_PRODUCT VARCHAR(255),
                        _PRICE DECIMAL(10,2),
                        _CANT_PRODUCTS DECIMAL(5,2),
                        _DISCOUNT DECIMAL(10,2),
                        _TOTAL DECIMAL(10,2),
                        _NUM_LOT VARCHAR(255)
)BEGIN
    -- OBTENEMOS LA ULTIMA FACTURA
    SET @COD = (SELECT MAX(COD_INVOICE) FROM SALES_INVOICE);
    
	-- INSERTAR DETALLE DE FACTURA
	INSERT INTO SALE_DETAIL(COD_INVOICE, COD_PRODUCT, PRICE, CANT_PRODUCTS, DISCOUNT, TOTAL)
	VALUES(@COD, _COD_PRODUCT, _PRICE, _CANT_PRODUCTS, _DISCOUNT, _TOTAL);
		
	-- ACTUALIZAMOS EL DETALLE
	UPDATE INVENTORY_DETAIL
	SET CANT_PRODUCTS = CANT_PRODUCTS - _CANT_PRODUCTS
	WHERE COD_PRODUCT = _COD_PRODUCT
	AND NUM_LOT = _NUM_LOT;
    
	INSERT INTO INVENTORY_TRANSACTIONS(COD_PRODUCT, TYP_TRANSACTION, CANT, NUM_LOT, DAT_TRANSACTION)
	VALUES(_COD_PRODUCT, 'Salida - Venta', _CANT_PRODUCTS, _NUM_LOT, NOW());
    
    -- ACTUALIZAR CANTIDAD DE PRODUCTOS TOTALES EN INVENTARIO
    UPDATE INVENTORY
    SET CANT_TOTAL = CANT_TOTAL - _CANT_PRODUCTS
    WHERE COD_PRODUCT = _COD_PRODUCT;
END;
//

-- CONSULTA A LA TABLA 'SALE DETAIL'
DELIMITER //
CREATE PROCEDURE SP_SEL_SALE_DETAIL(
									IN _COD_INVOICE BIGINT
)BEGIN
	SELECT COD_DETAIL, COD_INVOICE, INVENTORY.COD_PRODUCT, NAM_PRODUCT, PRICE, CANT_PRODUCTS, DISCOUNT, TOTAL
    FROM SALE_DETAIL, INVENTORY
    WHERE INVENTORY.COD_PRODUCT = SALE_DETAIL.COD_PRODUCT
    AND COD_INVOICE = _COD_INVOICE;
END;
//

/*###### MODULO DE COMPRAS Y PEDIDOS #####*/

/*###### MODULO DE COMPRAS Y PEDIDOS #####*/

-- INSERT EN LA TABLA `FACTURA DE COMPRA`
DELIMITER //
CREATE PROCEDURE SP_INS_PURCHASE_INVOICE(
                                     IN _SUBTOTAL DECIMAL(10,2),
                                     _TOT_DISCOUNT DECIMAL(10,2),
                                     _TOT_ISV DECIMAL(10,2),
                                     _TOT_PURCHASE DECIMAL(10,2),
                                     _TYP_TO_PURCHASE ENUM('Crédito', 'Contado'),
                                     _COD_TYP_PAY BIGINT,
                                     _DAT_INVOICE DATE,
                                     _COD_ORDER BIGINT,
                                     _COD_USER BIGINT,
                                     _DESCRIPTION TEXT,
                                     _DATE_LIMIT DATE
)BEGIN
	IF EXISTS (SELECT COD_ORDER FROM ORDERS WHERE COD_ORDER = _COD_ORDER) OR _COD_ORDER = 0 THEN
		IF _COD_ORDER = 0 THEN
			INSERT INTO PURCHASE_INVOICE(SUBTOTAL,TOT_DISCOUNT,TOT_ISV,TOT_PURCHASE,TYP_TO_PURCHASE,COD_TYP_PAY,DAT_INVOICE,COD_ORDER,COD_USER)
			VALUES( _SUBTOTAL, _TOT_DISCOUNT,_TOT_ISV,_TOT_PURCHASE,_TYP_TO_PURCHASE,_COD_TYP_PAY,_DAT_INVOICE,NULL,_COD_USER);
		ELSE
			 INSERT INTO PURCHASE_INVOICE(SUBTOTAL,TOT_DISCOUNT,TOT_ISV,TOT_PURCHASE,TYP_TO_PURCHASE,COD_TYP_PAY,DAT_INVOICE,COD_ORDER,COD_USER)
			 VALUES( _SUBTOTAL, _TOT_DISCOUNT,_TOT_ISV,_TOT_PURCHASE,_TYP_TO_PURCHASE,_COD_TYP_PAY,_DAT_INVOICE,_COD_ORDER,_COD_USER);
        END IF;
        
        SET @INVOICE = (SELECT MAX(COD_INVOICE) FROM PURCHASE_INVOICE);
        
        IF _TYP_TO_PURCHASE = 'Crédito' THEN
			INSERT INTO ACCOUNTS_TO_PAY(COD_INVOICE, DESCRIPTION, TOT_BALANCE, DATE_LIMIT)
            VALUES(@INVOICE, _DESCRIPTION, _TOT_PURCHASE, _DATE_LIMIT);
        END IF;
	ELSE
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'La orden no existe.';
    END IF;
 END;
 //
 
 -- UPDATE EN LA TABLA `FACTURA DE COMPRA`
  DELIMITER //
 CREATE PROCEDURE SP_UPD_PURCHASE_INVOICE (
                                      IN _COD_INVOICE BIGINT,
                                      _SUBTOTAL DECIMAL(10,2),
                                     _TOT_DISCOUNT DECIMAL(10,2),
                                     _TOT_ISV DECIMAL(10,2),
                                     _TOT_PURCHASE DECIMAL(10,2),
                                     _TYP_TO_PURCHASE ENUM('CREDITO', 'CONTADO'),
                                     _COD_TYP_PAY BIGINT, 
                                     _DAT_INVOICE DATE,
                                     _COD_ORDER BIGINT,
                                     _COD_USER BIGINT
                                     
)BEGIN 
-- ACTUALIZAR DATOS 
	UPDATE PURCHASE_INVOICE  
	SET SUBTOTAL=_SUBTOTAL,TOT_DISCOUNT = _TOT_DISCOUNT,TOT_ISV = _TOT_ISV,TOT_PURCHASE = _TOT_PURCHASE,TYP_TO_PURCHASE = _TYP_TO_PURCHASE,COD_TYP_PAY = _COD_TYP_PAY,DAT_INVOICE = _DAT_INVOICE,COD_ORDER = _COD_ORDER,COD_USER = _COD_USER
	WHERE COD_INVOICE = _COD_INVOICE;
END;
//

-- INSERT EN LA TABLA `DETALLE DE COMPRA`
DELIMITER //
CREATE PROCEDURE SP_INS_PURCHASE_DETAIL(
								IN _COD_PRODUCT BIGINT,
                                _PRICE DECIMAL(10,2),
                                _CANT_PRODUCTS INT,
                                _DISCOUNT DECIMAL(5,2),
                                _TOTAL DECIMAL(10,2) 
)BEGIN
	-- OBTENEMOS LA ULTIMA FACTURA
	SET @ID = (SELECT MAX(COD_INVOICE) FROM PURCHASE_INVOICE);

	INSERT INTO PURCHASE_DETAIL(COD_INVOICE, COD_PRODUCT, PRICE,CANT_PRODUCTS, DISCOUNT,TOTAL)
	VALUES(@ID, _COD_PRODUCT, _PRICE, _CANT_PRODUCTS, _DISCOUNT,_TOTAL);
END;
//

-- UPDATE EN LA TABLA DETALLE DE COMPRA
DELIMITER //
CREATE PROCEDURE SP_UPD_PURCHASE_DETAIL(
								IN _COD_DETAIL BIGINT,
                                _COD_PRODUCT BIGINT,
                                _PRICE DECIMAL(10,2),
                                _CANT_PRODUCTS INT,
                                _DISCOUNT DECIMAL(5,2),
                                _TOTAL DECIMAL(10,2)
)BEGIN
	-- ACTUALIZAR DATOS
	UPDATE PURCHASE_DETAIL
	SET COD_PRODUCT = _COD_PRODUCT, PRICE = _PRICE,CANT_PRODUCTS = _CANT_PRODUCTS,DISCOUNT = _DISCOUNT,TOTAL=_TOTAL
	WHERE COD_DETAIL = _COD_DETAIL;
END;
//

DELIMITER //
CREATE PROCEDURE SP_SEL_PURCHASE_INVOICE(
										  IN _COD_INVOICE BIGINT
)BEGIN
IF _COD_INVOICE = 0 THEN
  SELECT COD_INVOICE,SUBTOTAL,TOT_DISCOUNT,TOT_ISV,TOT_PURCHASE,TYP_TO_PURCHASE,NAM_TYPE_PAY,DAT_INVOICE,COD_ORDER,
    CONCAT(USER.FIRST_NAME, ' ' ,USER.LAST_NAME)USER_NAME
    FROM PURCHASE_INVOICE,TYPE_TO_PAY,USER
    WHERE PURCHASE_INVOICE.COD_TYP_PAY = TYPE_TO_PAY.COD_TYP_PAY
    AND PURCHASE_INVOICE.COD_USER = USER.COD_USER;
ELSE
    SELECT * FROM PURCHASE_INVOICE
    WHERE COD_INVOICE = _COD_INVOICE;
END IF;
END;    										
//

DELIMITER //
CREATE PROCEDURE SP_DEL_PURCHASE_INVOICE(
										  IN _COD_INVOICE BIGINT
)BEGIN
DELETE FROM PURCHASE_INVOICE
WHERE COD_INVOICE = _COD_INVOICE;
END;    										
//


DELIMITER //
CREATE PROCEDURE SP_SEL_PURCHASE_DETAIL(
										  IN _COD_INVOICE BIGINT
)BEGIN
	IF _COD_INVOICE = 0 THEN
		SELECT COD_DETAIL, PURCHASE_DETAIL.COD_PRODUCT, COD_INVOICE, NAM_PRODUCT,PRICE , CANT_PRODUCTS , DISCOUNT , TOTAL 
		FROM PURCHASE_DETAIL ,INVENTORY 
		WHERE INVENTORY.COD_PRODUCT = PURCHASE_DETAIL.COD_PRODUCT;
	ELSE
		SELECT COD_DETAIL, PURCHASE_DETAIL.COD_PRODUCT, COD_INVOICE, NAM_PRODUCT,PRICE , CANT_PRODUCTS , DISCOUNT , TOTAL 
		FROM PURCHASE_DETAIL ,INVENTORY 
		WHERE INVENTORY.COD_PRODUCT = PURCHASE_DETAIL.COD_PRODUCT
        AND COD_INVOICE = _COD_INVOICE;
	END IF;
END;    										
//

DELIMITER //
CREATE PROCEDURE SP_DEL_PURCHASE_DETAIL(
										  IN _COD_DETAIL BIGINT
)BEGIN
	DELETE FROM PURCHASE_DETAIL
	WHERE COD_DETAIL = _COD_DETAIL;
END;    										
//

-- INSERT EN LA TABLA DE `PEDIDO`
DELIMITER //
CREATE PROCEDURE SP_INS_ORDER(
								IN 
									_COD_SUPPLIER BIGINT,
                                    _DAT_REQUIRED DATE,
                                    _COD_USER BIGINT
)BEGIN
-- INSERTAR EN LA BASE DE DATOS -- 
	INSERT INTO ORDERS (COD_SUPPLIER, DAT_ORDER, DAT_REQUIRED, COD_USER, COD_STATUS)
	VALUES(_COD_SUPPLIER, CURDATE(), _DAT_REQUIRED, _COD_USER, 5);
END;
//

-- UPDATE EN LA TABLA DE `PEDIDO`
DELIMITER //
CREATE PROCEDURE SP_UPD_ORDER(
						IN
							_COD_ORDER BIGINT,
							_COD_STATUS BIGINT
)BEGIN
	UPDATE ORDERS
	SET COD_STATUS = _COD_STATUS
	WHERE COD_ORDER = _COD_ORDER;
END;
//

-- INSERT EN LA TABLA DE `DETALLE DE PEDIDO`
DELIMITER //
CREATE PROCEDURE SP_INS_ORDER_DETAIL(
								IN
                                    _COD_PRODUCT BIGINT,
                                    _DES_ORDER TEXT,
                                    _CANT_PRODUCTS INT
)BEGIN
	-- INSERTAR A LA BASE DE DATOS --
	SET @COD_ORDER = (SELECT MAX(COD_ORDER) FROM ORDERS);

	INSERT INTO ORDER_DETAIL(COD_ORDER, COD_PRODUCT, DES_ORDER, CANT_PRODUCTS)
	VALUES(@COD_ORDER, _COD_PRODUCT, _DES_ORDER, _CANT_PRODUCTS);
END;
//

DELIMITER //
CREATE PROCEDURE SP_UPD_ORDER_DETAIL(
									IN
										_COD_ORDER BIGINT,
										_COD_PRODUCT BIGINT,
                                        _DES_ORDER TEXT,
                                        _CANT_PRODUCTS INT
)BEGIN
		INSERT INTO ORDER_DETAIL(COD_ORDER, COD_PRODUCT, DES_ORDER, CANT_PRODUCTS)
		VALUES(_COD_ORDER, _COD_PRODUCT, _DES_ORDER, _CANT_PRODUCTS);
END;
//

DELIMITER //
CREATE PROCEDURE SP_SEL_ORDERS(
								IN _COD_ORDER BIGINT
)BEGIN
	IF _COD_ORDER = 0 THEN
		SELECT COD_ORDER, ORDERS.COD_SUPPLIER, ORDERS.COD_STATUS, NAM_SUPPLIER, DAT_ORDER, DAT_REQUIRED, NAM_STATUS,
		CONCAT(FIRST_NAME, ' ', LAST_NAME) USER_NAME
		FROM ORDERS, SUPPLIER, USER, STATUS
		WHERE ORDERS.COD_SUPPLIER = SUPPLIER.COD_SUPPLIER
		AND ORDERS.COD_USER = USER.COD_USER
		AND ORDERS.COD_STATUS = STATUS.COD_STATUS;
	ELSE
		SELECT COD_ORDER, ORDERS.COD_SUPPLIER, ORDERS.COD_STATUS, NAM_SUPPLIER, DAT_ORDER, DAT_REQUIRED, NAM_STATUS,
		CONCAT(FIRST_NAME, ' ', LAST_NAME) USER_NAME
		FROM ORDERS, SUPPLIER, USER, STATUS
		WHERE ORDERS.COD_SUPPLIER = SUPPLIER.COD_SUPPLIER
		AND ORDERS.COD_USER = USER.COD_USER
		AND ORDERS.COD_STATUS = STATUS.COD_STATUS
		AND COD_ORDER = _COD_ORDER;
	END IF;
END;
//

DELIMITER //
CREATE PROCEDURE SP_DEL_ORDERS(
								IN _COD_ORDER BIGINT
)BEGIN
	DELETE FROM ORDERS
    WHERE COD_ORDER = _COD_ORDER;
END;
//

DELIMITER //
CREATE PROCEDURE SP_SEL_ORDER_DETAIL(
								IN _COD_ORDER BIGINT
)BEGIN
	SELECT COD_DETAIL_ORDER, ORDER_DETAIL.COD_PRODUCT, COD_ORDER, NAM_PRODUCT, DES_ORDER, CANT_PRODUCTS
	FROM ORDER_DETAIL, INVENTORY
	WHERE ORDER_DETAIL.COD_PRODUCT = INVENTORY.COD_PRODUCT
	AND COD_ORDER = _COD_ORDER;
END;
//

DELIMITER //
CREATE PROCEDURE SP_DEL_ORDER_DETAIL(
								IN _COR_ORDER BIGINT
)BEGIN
	DELETE FROM ORDER_DETAIL
    WHERE _COR_ORDER = _COR_ORDER;
END;
//

/*###### MODULO DE PERSONAS #####*/

-- INSERT EN LA TABLA DE `PROVEEDOR`
DELIMITER //
CREATE PROCEDURE SP_INS_SUPPLIER( 
							   IN _NAM_SUPPLIER VARCHAR(255),
								_NAM_CONTACT VARCHAR(255),
								_LAST_NAM_CONTACT VARCHAR(255),
								_ADDRESS TEXT,
								_NUM_PHONE_ONE INT,
								_NUM_PHONE_TWO INT,
								_EMAIL VARCHAR (255),
								_NAM_CITY VARCHAR(255),
								_ZIP_CODE INT
)BEGIN
	IF EXISTS(SELECT EMAIL FROM SUPPLIER WHERE EMAIL = _EMAIL) THEN
			SIGNAL SQLSTATE  '45000'
			SET MESSAGE_TEXT= 'El email del proveedor ya se encuentra registrado.';
	END IF;
	 -- INSERT SUPPLIER
	if exists(select cod_supplier from supplier where NAM_SUPPLIER=_NAM_SUPPLIER) then
			SIGNAL SQLSTATE  '45000'
			SET MESSAGE_TEXT= 'El nombre del proveedor ya se encuentro registrado.';
		else
        	INSERT INTO SUPPLIER (NAM_SUPPLIER, NAM_CONTACT, LAST_NAM_CONTACT, ADDRESS, NUM_PHONE_ONE, NUM_PHONE_TWO, EMAIL, NAM_CITY, ZIP_CODE)
			VALUES(_NAM_SUPPLIER, _NAM_CONTACT, _LAST_NAM_CONTACT, _ADDRESS, _NUM_PHONE_ONE, _NUM_PHONE_TWO, _EMAIL, _NAM_CITY, _ZIP_CODE);
	end if;
END;
//

-- UPDATE EN LA TABLA DE `PROVEEDOR`
DELIMITER // 
CREATE PROCEDURE SP_UPD_SUPPLIER(
 						IN  _COD_SUPPLIER BIGINT,
							_NAM_SUPPLIER VARCHAR(255),
                            _NAM_CONTACT VARCHAR(255),
                            _LAST_NAM_CONTACT VARCHAR(255),
							_ADDRESS TEXT,
                            _NUM_PHONE_ONE INT,
							_NUM_PHONE_TWO INT,
                            _EMAIL VARCHAR (255),
                            _NAM_CITY VARCHAR(255),
                            _ZIP_CODE INT
)BEGIN
START TRANSACTION;
	 UPDATE SUPPLIER
	 SET NAM_SUPPLIER= _NAM_SUPPLIER,
		NAM_CONTACT= _NAM_CONTACT,
		LAST_NAM_CONTACT=_LAST_NAM_CONTACT,
		ADDRESS= _ADDRESS,
		NUM_PHONE_ONE=_NUM_PHONE_ONE,
		NUM_PHONE_TWO=_NUM_PHONE_TWO,
		EMAIL=_EMAIL,
		NAM_CITY =_NAM_CITY,
		ZIP_CODE=_ZIP_CODE
	WHERE COD_SUPPLIER= _COD_SUPPLIER;
    
    SET @NAM_SUPPLIER = (select COUNT(NAM_SUPPLIER) from supplier where NAM_SUPPLIER = _NAM_SUPPLIER);
    SET @EMAIL = (SELECT COUNT(EMAIL) FROM SUPPLIER WHERE EMAIL = _EMAIL);
    
    IF @NAM_SUPPLIER > 1 OR @EMAIL > 1 THEN
		ROLLBACK;
		SIGNAL SQLSTATE  '45000'
		SET MESSAGE_TEXT= 'El nombre o email del proveedor ya se encuentra registrado.';
	ELSE
		COMMIT;
    END IF;
END;
//

DELIMITER //
CREATE PROCEDURE SP_SEL_SUPPLIER (
						IN _COD_SUPPLIER  BIGINT
)BEGIN
          IF _COD_SUPPLIER = 0 THEN
		SELECT * FROM SUPPLIER;
		ELSE
		SELECT * FROM SUPPLIER
        WHERE COD_SUPPLIER = _COD_SUPPLIER;
    END IF;
END;
//

DELIMITER //
CREATE PROCEDURE SP_DEL_SUPPLIER (
						IN _COD_SUPPLIER  BIGINT
)BEGIN
       DELETE FROM SUPPLIER
       WHERE _COD_SUPPLIER= COD_SUPPLIER;
END;
//

-- INSERT EN LA TABLA DE `USUARIO`
DELIMITER //
CREATE PROCEDURE SP_INS_USER(
       IN 
       _IDENTITY VARCHAR(13),
       _FIRST_NAME VARCHAR(255),
       _MIDDLE_NAME VARCHAR(255),
       _LAST_NAME VARCHAR(255),
       _SECOND_LAST_NAME VARCHAR(255),
       _GENDER ENUM('M','F','O'),
       _NUM_PHONE_ONE INT,
       _NUM_PHONE_TWO INT,
       _NUM_REFERENCE INT,
       _DAT_BIRTHDAY DATE,
       _NAM_CITY VARCHAR(255),
       _ADDRESS TEXT,
       _IMG_USER MEDIUMBLOB,
       _COD_ROLE BIGINT,
       _COD_STATUS BIGINT ,
       _USER_EMAIL VARCHAR(255),
       _USER_PASSWORD VARCHAR(255),
    	_COD_USER BIGINT
)
BEGIN
-- INSERT
	SET @EMAIL = (SELECT COUNT(COD_USER) FROM LOGIN WHERE USER_EMAIL = _USER_EMAIL);
	SET @COD_IDEN = (SELECT COUNT(COD_USER) FROM USER WHERE IDENTITY = _IDENTITY);
 
  IF @EMAIL = 0 AND @COD_IDEN= 0 THEN
  	INSERT INTO USER(IDENTITY, FIRST_NAME,MIDDLE_NAME,LAST_NAME, SECOND_LAST_NAME, GENDER, NUM_PHONE_ONE, NUM_PHONE_TWO, NUM_REFERENCE, DAT_BIRTHDAY, NAM_CITY, ADDRESS, IMG_USER, COD_STATUS)
  	VALUES (_IDENTITY, _FIRST_NAME, _MIDDLE_NAME, _LAST_NAME, _SECOND_LAST_NAME, _GENDER, _NUM_PHONE_ONE, _NUM_PHONE_TWO, _NUM_REFERENCE, _DAT_BIRTHDAY, _NAM_CITY, _ADDRESS, _IMG_USER, _COD_STATUS);

  	SET @COD_USER= (SELECT MAX(COD_USER) FROM USER);
        
  -- INSERTAR DATOS A LOGIN
  	INSERT INTO LOGIN(COD_USER, COD_ROLE , USER_EMAIL, USER_PASSWORD, DAT_CREATE, DAT_EXP) 
    VALUES(@COD_USER, _COD_ROLE, _USER_EMAIL, _USER_PASSWORD, NOW(), DATE_ADD(NOW(), INTERVAL 1 DAY)); 
  
	SET @USERCOUNT = (SELECT COUNT(*) FROM USER);
        
	IF @USERCOUNT != 0 THEN
	   SET @USER_MAX = (SELECT MAX(COD_USER) FROM USER);
	   SET @USER_ADD = (SELECT CONCAT(FIRST_NAME, ' ', LAST_NAME) FROM USER WHERE COD_USER = @USER_MAX);
		-- INSERTAR EN LA BITACORA
	   INSERT INTO MS_BITACORA(COD_USER, ACTION, OBJECT, FIELD, RECORD, BEFORE_THE_CHANGE, AFTER_THE_CHANGE, DATE)
	   VALUES(_COD_USER, 'Agregar', 'Usuarios', '', @USER_ADD, '', '', Now());
	END IF;
        
	ELSE 
	SIGNAL SQLSTATE  '45000'
	SET MESSAGE_TEXT= 'El usuario ya se encuentra registrado.';
	END IF;
END;
//

-- UPDATE EN LA TABLA DE `USUARIO`
 DELIMITER //
CREATE PROCEDURE SP_UPD_USER(
							IN _COD_USER BIGINT,
								_IDENTITY VARCHAR(13),
								_FIRST_NAME VARCHAR(255),
								_MIDDLE_NAME VARCHAR(255),
								_LAST_NAME VARCHAR(255),
                                _SECOND_LAST_NAME VARCHAR(255),
								_GENDER ENUM('M','F','O'),
								_NUM_PHONE_ONE INT,
								_NUM_PHONE_TWO INT,
								_NUM_REFERENCE INT,
								_DAT_BIRTHDAY DATE,
								_NAM_CITY VARCHAR(255),
								_ADDRESS TEXT,
                                _COD_STATUS BIGINT,
								_COD_ROLE BIGINT,
                                _USER_EMAIL VARCHAR(255),
                                _USER_ACTIVITY BIGINT,
                                _USER_PASSWORD VARCHAR(255)
)
BEGIN
START TRANSACTION;

    -- LOGICA DE BITACORA
    SET @IDENTITY = (SELECT IDENTITY FROM USER WHERE COD_USER = _COD_USER);
    SET @FIRST_NAME = (SELECT FIRST_NAME FROM USER WHERE COD_USER = _COD_USER);
    SET @MIDDLE_NAME = (SELECT MIDDLE_NAME FROM USER WHERE COD_USER = _COD_USER);
    SET @LAST_NAME = (SELECT LAST_NAME FROM USER WHERE COD_USER = _COD_USER);
    SET @SECOND_LAST_NAME = (SELECT SECOND_LAST_NAME FROM USER WHERE COD_USER = _COD_USER);
    SET @GENDER = (SELECT GENDER FROM USER WHERE COD_USER = _COD_USER);
    SET @NUM_PHONE_ONE = (SELECT NUM_PHONE_ONE FROM USER WHERE COD_USER = _COD_USER);
    SET @NUM_PHONE_TWO = (SELECT NUM_PHONE_TWO FROM USER WHERE COD_USER = _COD_USER);
    SET @NUM_REFERENCE = (SELECT NUM_REFERENCE FROM USER WHERE COD_USER = _COD_USER);
    SET @DAT_BIRTHDAY = (SELECT DAT_BIRTHDAY FROM USER WHERE COD_USER = _COD_USER);
    SET @NAM_CITY = (SELECT NAM_CITY FROM USER WHERE COD_USER = _COD_USER);
    SET @ADDRESS = (SELECT ADDRESS FROM USER WHERE COD_USER = _COD_USER);
    SET @NAM_CURRENT_STATUS = (SELECT NAM_STATUS FROM USER, STATUS WHERE COD_USER = _COD_USER AND USER.COD_STATUS = STATUS.COD_STATUS);
    SET @NAM_CURRENT_ROLE = (SELECT NAM_ROLE FROM LOGIN, ROLE WHERE COD_USER = _COD_USER AND LOGIN.COD_ROLE = ROLE.COD_ROLE);
    SET @USER_EMAIL = (SELECT USER_EMAIL FROM LOGIN WHERE COD_USER = _COD_USER);
    SET @USER_PASSWORD = (SELECT USER_PASSWORD FROM LOGIN WHERE COD_USER = _COD_USER);
   
	UPDATE USER 
SET 
    IDENTITY = _IDENTITY,
    FIRST_NAME = _FIRST_NAME,
    MIDDLE_NAME = _MIDDLE_NAME,
    LAST_NAME = _LAST_NAME,
    SECOND_LAST_NAME = _SECOND_LAST_NAME,
    GENDER = _GENDER,
    NUM_PHONE_ONE = _NUM_PHONE_ONE,
    NUM_PHONE_TWO = _NUM_PHONE_TWO,
    NUM_REFERENCE = _NUM_REFERENCE,
    DAT_BIRTHDAY = _DAT_BIRTHDAY,
    NAM_CITY = _NAM_CITY,
    ADDRESS = _ADDRESS,
    COD_STATUS = _COD_STATUS
WHERE
    COD_USER = _COD_USER;
    
UPDATE LOGIN 
SET 
    COD_ROLE = _COD_ROLE,
    USER_EMAIL = _USER_EMAIL
WHERE
    COD_USER = _COD_USER;
    
    -- SETEO EN BITACORA
    SET @EMAIL = (SELECT COUNT(COD_USER) FROM LOGIN WHERE USER_EMAIL = _USER_EMAIL);
	SET @COD_IDEN = (SELECT COUNT(COD_USER) FROM USER WHERE IDENTITY = _IDENTITY);
    
    SET @USER_EDITED = (SELECT CONCAT(FIRST_NAME, ' ', LAST_NAME) FROM USER WHERE COD_USER = _COD_USER);
    
    IF @IDENTITY != _IDENTITY THEN
		INSERT INTO MS_BITACORA(COD_USER, ACTION, OBJECT, FIELD, RECORD, BEFORE_THE_CHANGE, AFTER_THE_CHANGE, DATE)
		VALUES(_USER_ACTIVITY, 'Editar', 'Usuarios', 'Identidad', @USER_EDITED, @IDENTITY, _IDENTITY, Now());
	END IF;
    
    IF @FIRST_NAME != _FIRST_NAME THEN
		INSERT INTO MS_BITACORA(COD_USER, ACTION, OBJECT, FIELD, RECORD, BEFORE_THE_CHANGE, AFTER_THE_CHANGE, DATE)
		VALUES(_USER_ACTIVITY, 'Editar', 'Usuarios', 'Primer nombre', @USER_EDITED, @FIRST_NAME, _FIRST_NAME, Now());
	END IF;
    
    IF @MIDDLE_NAME != _MIDDLE_NAME THEN
		INSERT INTO MS_BITACORA(COD_USER, ACTION, OBJECT, FIELD, RECORD, BEFORE_THE_CHANGE, AFTER_THE_CHANGE, DATE)
		VALUES(_USER_ACTIVITY, 'Editar', 'Usuarios', 'Segundo nombre', @USER_EDITED, @MIDDLE_NAME, _MIDDLE_NAME, Now());
	END IF;
    
    IF @LAST_NAME != _LAST_NAME THEN
		INSERT INTO MS_BITACORA(COD_USER, ACTION, OBJECT, FIELD, RECORD, BEFORE_THE_CHANGE, AFTER_THE_CHANGE, DATE)
		VALUES(_USER_ACTIVITY, 'Editar', 'Usuarios', 'Primer apellido', @USER_EDITED, @LAST_NAME, _LAST_NAME, Now());
	END IF;
    
    IF @SECOND_LAST_NAME != _SECOND_LAST_NAME THEN
		INSERT INTO MS_BITACORA(COD_USER, ACTION, OBJECT, FIELD, RECORD, BEFORE_THE_CHANGE, AFTER_THE_CHANGE, DATE)
		VALUES(_USER_ACTIVITY, 'Editar', 'Usuarios', 'Segundo apellido', @USER_EDITED, @SECOND_LAST_NAME, _SECOND_LAST_NAME, Now());
	END IF;
    
    IF @GENDER != _GENDER THEN
		INSERT INTO MS_BITACORA(COD_USER, ACTION, OBJECT, FIELD, RECORD, BEFORE_THE_CHANGE, AFTER_THE_CHANGE, DATE)
		VALUES(_USER_ACTIVITY, 'Editar', 'Usuarios', 'Género', @USER_EDITED, @GENDER, _GENDER, Now());
	END IF;
    
    IF @NUM_PHONE_ONE != _NUM_PHONE_ONE THEN
		INSERT INTO MS_BITACORA(COD_USER, ACTION, OBJECT, FIELD, RECORD, BEFORE_THE_CHANGE, AFTER_THE_CHANGE, DATE)
		VALUES(_USER_ACTIVITY, 'Editar', 'Usuarios', 'Teléfono 1', @USER_EDITED, @NUM_PHONE_ONE, _NUM_PHONE_ONE, Now());
	END IF;
    
    IF @NUM_PHONE_TWO != _NUM_PHONE_TWO THEN
		INSERT INTO MS_BITACORA(COD_USER, ACTION, OBJECT, FIELD, RECORD, BEFORE_THE_CHANGE, AFTER_THE_CHANGE, DATE)
		VALUES(_USER_ACTIVITY, 'Editar', 'Usuarios', 'Teléfono 2', @USER_EDITED, @NUM_PHONE_TWO, _NUM_PHONE_TWO, Now());
	END IF;
    
    IF @NUM_REFERENCE != _NUM_REFERENCE THEN
		INSERT INTO MS_BITACORA(COD_USER, ACTION, OBJECT, FIELD, RECORD, BEFORE_THE_CHANGE, AFTER_THE_CHANGE, DATE)
		VALUES(_USER_ACTIVITY, 'Editar', 'Usuarios', 'Teléfono de referencia', @USER_EDITED, @NUM_REFERENCE, _NUM_REFERENCE, Now());
	END IF;
    
    IF @DAT_BIRTHDAY != _DAT_BIRTHDAY THEN
		INSERT INTO MS_BITACORA(COD_USER, ACTION, OBJECT, FIELD, RECORD, BEFORE_THE_CHANGE, AFTER_THE_CHANGE, DATE)
		VALUES(_USER_ACTIVITY, 'Editar', 'Usuarios', 'Fecha de nacimiento', @USER_EDITED, @DAT_BIRTHDAY, _DAT_BIRTHDAY, Now());
	END IF;
    
    IF @NAM_CITY != _NAM_CITY THEN
		INSERT INTO MS_BITACORA(COD_USER, ACTION, OBJECT, FIELD, RECORD, BEFORE_THE_CHANGE, AFTER_THE_CHANGE, DATE)
		VALUES(_USER_ACTIVITY, 'Editar', 'Usuarios', 'Ciudad', @USER_EDITED, @NAM_CITY, _NAM_CITY, Now());
	END IF;
    
    IF @ADDRESS != _ADDRESS THEN
		INSERT INTO MS_BITACORA(COD_USER, ACTION, OBJECT, FIELD, RECORD, BEFORE_THE_CHANGE, AFTER_THE_CHANGE, DATE)
		VALUES(_USER_ACTIVITY, 'Editar', 'Usuarios', 'Dirección', @USER_EDITED, @ADDRESS, _ADDRESS, Now());
	END IF;
    
    SET @NAM_NEW_STATUS = (SELECT NAM_STATUS FROM USER, STATUS WHERE COD_USER = _COD_USER AND USER.COD_STATUS = STATUS.COD_STATUS);
    IF @NAM_CURRENT_STATUS != @NAM_NEW_STATUS THEN
		INSERT INTO MS_BITACORA(COD_USER, ACTION, OBJECT, FIELD, RECORD, BEFORE_THE_CHANGE, AFTER_THE_CHANGE, DATE)
		VALUES(_USER_ACTIVITY, 'Editar', 'Usuarios', 'Estado', @USER_EDITED, @NAM_CURRENT_STATUS, @NAM_NEW_STATUS, Now());
	END IF;
    
	SET @NAM_NEW_ROLE = (SELECT NAM_ROLE FROM LOGIN, ROLE WHERE COD_USER = _COD_USER AND LOGIN.COD_ROLE = ROLE.COD_ROLE);
    IF @NAM_CURRENT_ROLE != @NAM_NEW_ROLE THEN
		INSERT INTO MS_BITACORA(COD_USER, ACTION, OBJECT, FIELD, RECORD, BEFORE_THE_CHANGE, AFTER_THE_CHANGE, DATE)
		VALUES(_USER_ACTIVITY, 'Editar', 'Usuarios', 'Rol', @USER_EDITED, @NAM_CURRENT_ROLE, @NAM_NEW_ROLE, Now());
	END IF;
    
    IF @USER_EMAIL != _USER_EMAIL THEN
		INSERT INTO MS_BITACORA(COD_USER, ACTION, OBJECT, FIELD, RECORD, BEFORE_THE_CHANGE, AFTER_THE_CHANGE, DATE)
		VALUES(_USER_ACTIVITY, 'Editar', 'Usuarios', 'Correo electrónico', @USER_EDITED, @USER_EMAIL, _USER_EMAIL, Now());
	END IF;
        
    -- VALIDAR USUARIO NO SE ENCUENTRE REGISTRADO MAS DE UNA VEZ
    IF @EMAIL > 1 OR @COD_IDEN > 1 THEN
		ROLLBACK;
		SIGNAL SQLSTATE  '45000'
		SET MESSAGE_TEXT= 'El usuario ya se encuentra registrado.';
	ELSE 
		COMMIT;
	END IF;
    
    IF _USER_PASSWORD != "0" THEN 
		UPDATE LOGIN 
        SET USER_PASSWORD = _USER_PASSWORD,
        DAT_EXP = DATE_ADD(NOW(), INTERVAL 1 DAY),
        NUM_ATTEMPS = 0
        WHERE COD_USER = _COD_USER;
        
		IF @USER_PASSWORD != _USER_PASSWORD THEN
		INSERT INTO MS_BITACORA(COD_USER, ACTION, OBJECT, FIELD, RECORD, BEFORE_THE_CHANGE, AFTER_THE_CHANGE, DATE)
		VALUES(_USER_ACTIVITY, 'Editar', 'Usuarios', 'Contraseña', @USER_EDITED, '', '', Now());
		END IF;
    END IF;
END;
//

-- OBTENER TODOS LOS USUARIOS Y USUARIO POR ID
DELIMITER //
CREATE PROCEDURE SP_SEL_USER(
														IN _COD_USER BIGINT
)
BEGIN
	IF _COD_USER = 0  THEN
      select * from status inner join user  on status.cod_status= user.cod_status inner join login on user.cod_user= login.cod_user  inner join role on login.cod_role = role.cod_role ;                     

	ELSE
  select * from status inner join user  on status.cod_status= user.cod_status inner join login on user.cod_user= login.cod_user inner join role on login.cod_role = role.cod_role where _cod_user= user.cod_user;  
    END IF;
END;
//

-- ELIMINAR USUARIO
DELIMITER //
CREATE PROCEDURE SP_DEL_USER(
							IN _COD_USER BIGINT,
                            _USER_ACTIVITY BIGINT
)BEGIN
    SET @USER_DELETED = (SELECT CONCAT(FIRST_NAME, ' ', LAST_NAME) FROM USER WHERE COD_USER = _COD_USER);
    
	DELETE FROM USER
    WHERE COD_USER = _COD_USER;
    
	INSERT INTO MS_BITACORA(COD_USER, ACTION, OBJECT, FIELD, RECORD, BEFORE_THE_CHANGE, AFTER_THE_CHANGE, DATE)
	VALUES(_USER_ACTIVITY, 'Eliminar', 'Usuarios', '', @USER_DELETED, '', '', Now());
END;
//

-- INSERT EN LA TABLA DE `CLIENTE`
DELIMITER //
CREATE PROCEDURE SP_INS_CLIENT(
						IN _IDENTITY VARCHAR(13),
                        _FIRST_NAME VARCHAR(255),
                        _MIDDLE_NAME VARCHAR(255),
                        _LAST_NAME VARCHAR(255),
                        _SECOND_LAST_NAME VARCHAR(255),
                        _ADDRESS TEXT,
                        _NUM_PHONE_ONE INT,
                        _NUM_PHONE_TWO INT,
                        _RTN VARCHAR(14)
)BEGIN
IF EXISTS (SELECT IDENTITY FROM CLIENT WHERE IDENTITY = _IDENTITY) OR (SELECT RTN FROM CLIENT WHERE RTN = _RTN) THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El cliente ya se encuentra registrado.';
    END IF;
    
    INSERT INTO CLIENT( IDENTITY, FIRST_NAME, MIDDLE_NAME, LAST_NAME, _SECOND_LAST_NAME, ADDRESS, NUM_PHONE_ONE,NUM_PHONE_TWO,RTN)
	VALUES ( _IDENTITY,  _FIRST_NAME, _MIDDLE_NAME, _LAST_NAME, _SECOND_LAST_NAME, _ADDRESS, _NUM_PHONE_ONE, _NUM_PHONE_TWO, _RTN);
END;
//

 -- UPDATE EN LA TABLA DE `CLIENTE`                        
DELIMITER //
CREATE PROCEDURE SP_UPD_CLIENT(
							IN	_COD_CLIENT BIGINT,
							_IDENTITY VARCHAR(13),
							_FIRST_NAME VARCHAR(255),
							_MIDDLE_NAME VARCHAR(255),
							_LAST_NAME VARCHAR(255),
                            _SECOND_LAST_NAME VARCHAR(255),
							_ADDRESS TEXT,
							_NUM_PHONE_ONE INT,
							_NUM_PHONE_TWO INT,
							_RTN VARCHAR(14)
)BEGIN
START TRANSACTION;
		UPDATE CLIENT
		SET IDENTITY=_IDENTITY,
        FIRST_NAME = _FIRST_NAME,
        MIDDLE_NAME = _MIDDLE_NAME,
		LAST_NAME = _LAST_NAME,
        SECOND_LAST_NAME = _SECOND_LAST_NAME,
		ADDRESS = _ADDRESS,
		NUM_PHONE_ONE = _NUM_PHONE_ONE,
		NUM_PHONE_TWO = _NUM_PHONE_TWO,
		RTN = _RTN
		WHERE COD_CLIENT=_COD_CLIENT;
        
        SET @ID = (SELECT COUNT(IDENTITY) FROM CLIENT WHERE IDENTITY = _IDENTITY);
        SET @RTN = (SELECT COUNT(RTN) FROM CLIENT WHERE RTN = _RTN);
        
		IF @ID > 1 OR @RTN > 1 THEN
			ROLLBACK;
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'El cliente ya se encuentra registrado.';
        ELSE
			COMMIT;
		END IF;
END;
//

DELIMITER //
CREATE PROCEDURE SP_SEL_CLIENT(
						IN _COD_CLIENT  BIGINT
)
BEGIN
		IF _COD_CLIENT = 0 THEN
		SELECT * FROM CLIENT
        WHERE COD_CLIENT != 1;
		ELSE
		SELECT * FROM CLIENT
        WHERE COD_CLIENT = _COD_CLIENT;
    END IF;
END
//

DELIMITER //
 CREATE PROCEDURE SP_DEL_CLIENT (
						IN _COD_CLIENT  BIGINT
)BEGIN
       DELETE FROM CLIENT
       WHERE _COD_CLIENT= COD_CLIENT;
END;
//

/*###### MODULO DE PRODUCCIÓN #####*/

-- INSERT EN LA TABLA DE `INVENTARIO`
DELIMITER //
CREATE PROCEDURE SP_INS_INVENTORY(
							IN 	_COD_PRODUCT VARCHAR(255),
								_COD_SUPPLIER BIGINT,
								_NAM_PRODUCT VARCHAR(255),
                                _DES_PRODUCT TEXT,
                                _COD_CATEGORY BIGINT,
                                _COD_TYP_PRODUCT BIGINT
)
BEGIN
	IF EXISTS (SELECT COD_PRODUCT FROM INVENTORY WHERE COD_PRODUCT = _COD_PRODUCT) THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El SKU del producto ya se encuentra registrado';
    END IF;
	-- INSERT EN LA BD--
	INSERT INTO INVENTORY(COD_PRODUCT, COD_SUPPLIER, NAM_PRODUCT,DES_PRODUCT, CANT_TOTAL, COD_CATEGORY, COD_TYP_PRODUCT)
	VALUES (_COD_PRODUCT, _COD_SUPPLIER, _NAM_PRODUCT,_DES_PRODUCT, 0, _COD_CATEGORY, _COD_TYP_PRODUCT);
END
//

-- UPDATE EN LA TABLA DE `INVENTARIO`
DELIMITER //
CREATE PROCEDURE SP_UPD_INVENTORY(
							IN 	_COD_PRODUCT VARCHAR(255),
								_COD_SUPPLIER BIGINT,
								_NAM_PRODUCT VARCHAR(255),
                                _DES_PRODUCT TEXT,
                                _COD_CATEGORY BIGINT,
                                _COD_TYP_PRODUCT BIGINT
)
BEGIN
	 UPDATE INVENTORY 
	 SET COD_SUPPLIER = _COD_SUPPLIER,
		 NAM_PRODUCT =_NAM_PRODUCT,
		 DES_PRODUCT=_DES_PRODUCT,
         COD_CATEGORY = _COD_CATEGORY,
		 COD_TYP_PRODUCT = _COD_TYP_PRODUCT
	 WHERE COD_PRODUCT = _COD_PRODUCT;
END
//

-- INSERT EN LA TABLA `DETALLE DE INVENTARIO`
DELIMITER //
CREATE PROCEDURE SP_INS_INVENTORY_DETAIL(
							IN _COD_PRODUCT VARCHAR(255), 
							_NORMAL_UNIT_PRICE DECIMAL(10,2),
                            _PURCHASE_PRICE DECIMAL(10,2),
							_WHOLESALE_CANT DECIMAL(10,2),
							_WHOLESALE_PRICE DECIMAL(10,2),
                            _ISV DECIMAL(3,2),
							_DAT_PURCHASE DATE,
                            _DAT_EXP DATE,
                            _CANT_PRODUCTS DECIMAL(10,2),
                            _NUM_LOT VARCHAR(255),
                            _COD_ORDER BIGINT,
                            _COD_STATUS BIGINT
)
BEGIN
	SET @NUM_LOTE = (SELECT COUNT(NUM_LOT) FROM INVENTORY_DETAIL WHERE NUM_LOT = _NUM_LOT);
    
    IF @NUM_LOTE > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El lote ingresado ya existe';
	END IF;
    
-- INSERT EN LA BD--
	IF NOT EXISTS(SELECT COD_ORDER FROM ORDERS WHERE COD_ORDER = _COD_ORDER) AND _COD_ORDER != 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El código de orden ingresado no existe';
    ELSE  
		IF _COD_ORDER = 0 THEN
			INSERT INTO INVENTORY_DETAIL (COD_PRODUCT, NORMAL_UNIT_PRICE, PURCHASE_PRICE, WHOLESALE_CANT, WHOLESALE_PRICE, ISV, DAT_PURCHASE, DAT_EXP, CANT_PRODUCTS, NUM_LOT, COD_ORDER, COD_STATUS)
			VALUES (_COD_PRODUCT,_NORMAL_UNIT_PRICE, _PURCHASE_PRICE, _WHOLESALE_CANT, _WHOLESALE_PRICE, _ISV, _DAT_PURCHASE,_DAT_EXP,_CANT_PRODUCTS,_NUM_LOT, NULL, _COD_STATUS);
		ELSE
			INSERT INTO INVENTORY_DETAIL (COD_PRODUCT, NORMAL_UNIT_PRICE, PURCHASE_PRICE, WHOLESALE_CANT, WHOLESALE_PRICE, ISV, DAT_PURCHASE, DAT_EXP, CANT_PRODUCTS, NUM_LOT, COD_ORDER, COD_STATUS)
			VALUES (_COD_PRODUCT,_NORMAL_UNIT_PRICE, _PURCHASE_PRICE, _WHOLESALE_CANT, _WHOLESALE_PRICE, _ISV, _DAT_PURCHASE,_DAT_EXP,_CANT_PRODUCTS,_NUM_LOT, _COD_ORDER, _COD_STATUS);
	END IF;
		
		UPDATE INVENTORY
		SET CANT_TOTAL = CANT_TOTAL + _CANT_PRODUCTS
		WHERE COD_PRODUCT = _COD_PRODUCT;
					
		INSERT INTO INVENTORY_TRANSACTIONS(COD_PRODUCT, TYP_TRANSACTION, CANT, NUM_LOT, DAT_TRANSACTION)
		VALUES(_COD_PRODUCT, 'Entrada', _CANT_PRODUCTS , _NUM_LOT, CURDATE());
	END IF;
END						
//

-- UPDATE EN LA TABLA DE `DETALLE DE INVENTARIO`
DELIMITER //
CREATE PROCEDURE SP_UPD_INVENTORY_DETAIL(
							IN _COD_DETAIL BIGINT,
                            _COD_PRODUCT VARCHAR(255),
							_NORMAL_UNIT_PRICE DECIMAL(10,2),
                            _PURCHASE_PRICE DECIMAL(10,2),
							_WHOLESALE_CANT DECIMAL(10,2),
							_WHOLESALE_PRICE DECIMAL(10,2),
                            _ISV DECIMAL(3,2),
							_DAT_PURCHASE DATE,
                            _DAT_EXP DATE,
                            _CANT_PRODUCTS DECIMAL(10,2),
                            _NUM_LOT VARCHAR(255),
                            _COD_ORDER BIGINT,
                            _COD_STATUS BIGINT
)BEGIN
IF NOT EXISTS(SELECT COD_ORDER FROM ORDERS WHERE COD_ORDER = _COD_ORDER) THEN
SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El codigo de orden ingresado no existe';
    ELSE  
	UPDATE INVENTORY_DETAIL
	SET 
		COD_PRODUCT = _COD_PRODUCT,
		NORMAL_UNIT_PRICE =	_NORMAL_UNIT_PRICE,
        PURCHASE_PRICE = _PURCHASE_PRICE,
		WHOLESALE_CANT = _WHOLESALE_CANT,
		WHOLESALE_PRICE = _WHOLESALE_PRICE,
        ISV = _ISV,
		DAT_PURCHASE = _DAT_PURCHASE,
		DAT_EXP = _DAT_EXP,
		CANT_PRODUCTS = _CANT_PRODUCTS,
		NUM_LOT = _NUM_LOT,
		COD_ORDER = _COD_ORDER,
		COD_STATUS = _COD_STATUS
	WHERE COD_DETAIL = _COD_DETAIL;

	SET @CANT_TOTAL = (SELECT (SUM(CANT_PRODUCTS)) FROM INVENTORY_DETAIL WHERE COD_PRODUCT =_COD_PRODUCT);

	UPDATE INVENTORY
	SET CANT_TOTAL = @CANT_TOTAL 
	WHERE COD_PRODUCT = _COD_PRODUCT;
END IF;
END;
//

  -- INSERT EN LA TABLA DE `MERMA`
DELIMITER //
CREATE PROCEDURE SP_INS_PRODUCT_OUTPUT(
							IN  _COD_PRODUCT VARCHAR(255),
                            _DES_OUTPUT TEXT,
                            _COD_TYPE BIGINT,
                            _CANT_PRODUCT INT,
                            _NUM_LOT VARCHAR(255),
                            _COD_USER BIGINT,
                            _DAT_OUTPUT DATE
)
BEGIN
IF NOT EXISTS(SELECT COD_PRODUCT FROM INVENTORY WHERE COD_PRODUCT = _COD_PRODUCT) THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El codigo de producto ingresado no existe';			
END IF;
IF NOT EXISTS(SELECT COD_PRODUCT FROM INVENTORY_DETAIL WHERE NUM_LOT = _NUM_LOT AND COD_PRODUCT = _COD_PRODUCT) THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El número de lote no existe';			
END IF;
IF NOT EXISTS(SELECT COD_USER FROM USER WHERE COD_USER = _COD_USER) THEN
SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El codigo de usuario ingresado no existe';
	END IF;
    
    SET @CANT_PRODUCT = (SELECT CANT_PRODUCTS FROM INVENTORY_DETAIL WHERE COD_PRODUCT = _COD_PRODUCT AND NUM_LOT = _NUM_LOT);
    IF _CANT_PRODUCT > @CANT_PRODUCT  THEN 
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'No hay cantidad suficiente de productos en inventario';	
	END IF;
    
IF EXISTS(SELECT COD_PRODUCT FROM INVENTORY WHERE COD_PRODUCT = _COD_PRODUCT) AND (SELECT COD_USER FROM USER WHERE COD_USER = _COD_USER) THEN
	UPDATE INVENTORY_DETAIL
	SET CANT_PRODUCTS = CANT_PRODUCTS - _CANT_PRODUCT
	WHERE COD_PRODUCT = _COD_PRODUCT
    AND NUM_LOT = _NUM_LOT;

	INSERT INTO PRODUCT_OUTPUT(COD_PRODUCT, DES_OUTPUT, COD_TYPE, CANT_PRODUCT, NUM_LOT, COD_USER, DAT_OUTPUT)
	VALUES (_COD_PRODUCT, _DES_OUTPUT, _COD_TYPE, _CANT_PRODUCT, _NUM_LOT, _COD_USER, _DAT_OUTPUT);
	
	SET @CANT_TOTAL = (SELECT (SUM(CANT_PRODUCTS)) FROM INVENTORY_DETAIL WHERE COD_PRODUCT =_COD_PRODUCT);

	UPDATE INVENTORY
	SET CANT_TOTAL = @CANT_TOTAL
	WHERE COD_PRODUCT = _COD_PRODUCT;
    
    SET @NAM_TYPE = (SELECT NAM_TYPE FROM TYP_PRODUCT_OUTPUT WHERE COD_TYPE = _COD_TYPE);
	
    INSERT INTO INVENTORY_TRANSACTIONS(COD_PRODUCT, TYP_TRANSACTION, CANT, NUM_LOT, DAT_TRANSACTION)
	VALUES(_COD_PRODUCT, CONCAT('Salida - ', @NAM_TYPE), _CANT_PRODUCT , _NUM_LOT, NOW());
END IF;
END
// 

-- INSERT EN LA TABLA `ENTRADAS DE PRODUCTOS`
DELIMITER //
CREATE PROCEDURE SP_INS_PRODUCT_ENTRIES(
							IN  _COD_PRODUCT VARCHAR(255),
                            _DES_ENTRIE TEXT,
                            _COD_TYPE BIGINT,
                            _CANT_PRODUCT INT,
                            _NUM_LOT VARCHAR(255),
                            _COD_USER BIGINT,
                            _DAT_ENTRIES DATE
)
BEGIN
IF NOT EXISTS(SELECT COD_PRODUCT FROM INVENTORY WHERE COD_PRODUCT = _COD_PRODUCT) THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El codigo de producto ingresado no existe';			
END IF;
IF NOT EXISTS(SELECT COD_PRODUCT FROM INVENTORY_DETAIL WHERE NUM_LOT = _NUM_LOT AND COD_PRODUCT = _COD_PRODUCT) THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El número de lote no existe';			
END IF;
IF NOT EXISTS(SELECT COD_USER FROM USER WHERE COD_USER = _COD_USER) THEN
SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El codigo de usuario ingresado no existe';
	END IF;
    
IF EXISTS(SELECT COD_PRODUCT FROM INVENTORY WHERE COD_PRODUCT = _COD_PRODUCT) AND (SELECT COD_USER FROM USER WHERE COD_USER = _COD_USER) THEN
	UPDATE INVENTORY_DETAIL
	SET CANT_PRODUCTS = CANT_PRODUCTS + _CANT_PRODUCT
	WHERE COD_PRODUCT = _COD_PRODUCT
    AND NUM_LOT = _NUM_LOT;

	-- INSERT EN LA BD--
	INSERT INTO PRODUCT_ENTRIES (COD_PRODUCT, DES_ENTRIE, COD_TYPE, CANT_PRODUCT,NUM_LOT, COD_USER, DAT_ENTRIES)
	VALUES (_COD_PRODUCT, _DES_ENTRIE, _COD_TYPE, _CANT_PRODUCT, _NUM_LOT, _COD_USER, _DAT_ENTRIES);
    
    SET @CANT_TOTAL = (SELECT (SUM(CANT_PRODUCTS)) FROM INVENTORY_DETAIL WHERE COD_PRODUCT =_COD_PRODUCT);

	UPDATE INVENTORY
	SET CANT_TOTAL = @CANT_TOTAL
	WHERE COD_PRODUCT = _COD_PRODUCT;
      
	SET @NAM_TYPE = (SELECT NAM_TYPE FROM TYP_PRODUCT_ENTRIES WHERE COD_TYPE = _COD_TYPE);
		
	INSERT INTO INVENTORY_TRANSACTIONS(COD_PRODUCT, TYP_TRANSACTION, CANT, NUM_LOT, DAT_TRANSACTION)
	VALUES(_COD_PRODUCT, CONCAT('Entrada - ', @NAM_TYPE), _CANT_PRODUCT, _NUM_LOT, NOW());
END IF;

END
//

-- UPDATE EN LA TABLA `ENTRADA DE PRODUCTOS`
DELIMITER //
CREATE PROCEDURE SP_UPD_PRODUCT_ENTRIES(
							IN _COD_ENTRIES BIGINT, 
                            _DES_ENTRIES TEXT,
                            _COD_TYPE BIGINT,
                            _COD_USER BIGINT,
                            _DAT_ENTRIES DATE
)
BEGIN
		UPDATE PRODUCT_ENTRIES
		SET DES_ENTRIES = _DES_ENTRIES,
		COD_TYPE = _COD_TYPE,
		COD_USER =  _COD_USER,
		DAT_ENTRIES = _DAT_ENTRIES
		WHERE COD_ENTRIES = _COD_ENTRIES;
END
//

-- UPDATE EN LA TABLA `SALIDA DE PRODUCTOS`
DELIMITER //
CREATE PROCEDURE SP_UPD_PRODUCT_OUTPUT(
							IN _COD_OUTPUT BIGINT, 
                            _DES_OUTPUT TEXT,
                            _COD_TYPE BIGINT,
                            _COD_USER BIGINT,
                            _DAT_OUTPUT DATE
)
BEGIN
		UPDATE PRODUCT_OUTPUT
		SET DES_OUTPUT = _DES_OUTPUT,
		COD_TYPE = _COD_TYPE,
		COD_USER =  _COD_USER,
		DAT_OUTPUT = _DAT_OUTPUT
		WHERE COD_OUTPUT = _COD_OUTPUT;
END
//

-- #####
DELIMITER //
CREATE PROCEDURE SP_DEL_PRODUCT_OUTPUT(
						IN _COD_OUTPUT BIGINT
)
BEGIN 
SET @SALIDAS = (SELECT CANT_PRODUCT FROM PRODUCT_OUTPUT WHERE COD_OUTPUT = _COD_OUTPUT);
SET @COD_PRODUCT = (SELECT COD_PRODUCT FROM PRODUCT_OUTPUT WHERE COD_OUTPUT = _COD_OUTPUT);
SET @NUM_LOTE =  (SELECT NUM_LOT FROM PRODUCT_OUTPUT WHERE COD_OUTPUT = _COD_OUTPUT);
    
    UPDATE INVENTORY_DETAIL
	SET CANT_PRODUCTS =  CANT_PRODUCTS + @SALIDAS
	WHERE COD_PRODUCT = @COD_PRODUCT
    AND NUM_LOT = @NUM_LOTE;
    
	DELETE FROM PRODUCT_OUTPUT
	WHERE COD_OUTPUT = _COD_OUTPUT;
    
    SET @CANT_TOTAL = (SELECT (SUM(CANT_PRODUCTS)) FROM INVENTORY_DETAIL WHERE COD_PRODUCT = @COD_PRODUCT);

	UPDATE INVENTORY
	SET CANT_TOTAL = @CANT_TOTAL
	WHERE COD_PRODUCT = @COD_PRODUCT;
END
//

DELIMITER //
CREATE PROCEDURE SP_SEL_INVENTORY(
						IN _COD_PRODUCT VARCHAR(255)
)
BEGIN
	IF  _COD_PRODUCT = "0" THEN
			SELECT INVENTORY.COD_SUPPLIER, CATEGORY.COD_CATEGORY, TYPE_PRODUCT.COD_TYP_PRODUCT, COD_PRODUCT, NAM_PRODUCT, NAM_SUPPLIER, DES_PRODUCT, CANT_TOTAL,
            NAM_CATEGORY, NAM_TYPE_PRODUCT 
            FROM INVENTORY, SUPPLIER, CATEGORY, TYPE_PRODUCT
            WHERE INVENTORY.COD_SUPPLIER = SUPPLIER.COD_SUPPLIER
            AND INVENTORY.COD_CATEGORY = CATEGORY.COD_CATEGORY
            AND INVENTORY.COD_TYP_PRODUCT = TYPE_PRODUCT.COD_TYP_PRODUCT;
		ELSE 
			SELECT INVENTORY.COD_SUPPLIER, CATEGORY.COD_CATEGORY, TYPE_PRODUCT.COD_TYP_PRODUCT, COD_PRODUCT, NAM_PRODUCT, NAM_SUPPLIER, DES_PRODUCT, CANT_TOTAL, 
            NAM_CATEGORY, NAM_TYPE_PRODUCT 
            FROM INVENTORY, SUPPLIER, CATEGORY, TYPE_PRODUCT
            WHERE INVENTORY.COD_SUPPLIER = SUPPLIER.COD_SUPPLIER
            AND INVENTORY.COD_CATEGORY = CATEGORY.COD_CATEGORY
            AND INVENTORY.COD_TYP_PRODUCT = TYPE_PRODUCT.COD_TYP_PRODUCT
            AND COD_PRODUCT = _COD_PRODUCT;
	END IF;
END
//

DELIMITER //
CREATE PROCEDURE SP_SEL_INVENTORY_DETAIL(
						IN _COD_PRODUCT VARCHAR(255)
)
BEGIN
	IF  _COD_PRODUCT = "0" THEN
			SELECT INVENTORY_DETAIL.COD_PRODUCT, NAM_PRODUCT, DES_PRODUCT, COD_DETAIL, NORMAL_UNIT_PRICE, PURCHASE_PRICE, WHOLESALE_CANT, WHOLESALE_PRICE, ISV, CANT_PRODUCTS, DAT_PURCHASE, DAT_EXP, NUM_LOT, NAM_STATUS, COD_ORDER
            FROM INVENTORY_DETAIL, STATUS, INVENTORY
            WHERE INVENTORY_DETAIL.COD_STATUS = STATUS.COD_STATUS
            AND INVENTORY_DETAIL.COD_PRODUCT = INVENTORY.COD_PRODUCT
            AND CANT_PRODUCTS > 0
			ORDER BY DAT_EXP;
		ELSE 
			SELECT INVENTORY_DETAIL.COD_PRODUCT, NAM_PRODUCT, DES_PRODUCT, COD_DETAIL, NORMAL_UNIT_PRICE, PURCHASE_PRICE, WHOLESALE_CANT, WHOLESALE_PRICE, ISV, CANT_PRODUCTS, DAT_PURCHASE, DAT_EXP, NUM_LOT, NAM_STATUS, COD_ORDER
            FROM INVENTORY_DETAIL, STATUS, INVENTORY
            WHERE INVENTORY_DETAIL.COD_STATUS = STATUS.COD_STATUS
            AND INVENTORY_DETAIL.COD_PRODUCT = INVENTORY.COD_PRODUCT
            AND CANT_PRODUCTS > 0
            AND INVENTORY_DETAIL.COD_PRODUCT = _COD_PRODUCT
			ORDER BY DAT_EXP;
	END IF;
END
//

DELIMITER //
CREATE PROCEDURE SP_SEL_PRODUCT_ENTRIES(
						IN _COD_ENTRIES BIGINT
)BEGIN
	IF  _COD_ENTRIES = 0 THEN
			SELECT COD_ENTRIES, PRODUCT_ENTRIES.COD_PRODUCT, NAM_PRODUCT, DES_ENTRIES, PRODUCT_ENTRIES.COD_TYPE, NAM_TYPE, CANT_PRODUCT, NUM_LOT, NAM_SUPPLIER,
            CONCAT(FIRST_NAME, ' ', LAST_NAME) USER_NAME, DAT_ENTRIES
            FROM PRODUCT_ENTRIES, INVENTORY, USER, TYP_PRODUCT_ENTRIES, SUPPLIER
            WHERE PRODUCT_ENTRIES.COD_PRODUCT = INVENTORY.COD_PRODUCT
            AND PRODUCT_ENTRIES.COD_USER = USER.COD_USER
            AND PRODUCT_ENTRIES.COD_TYPE = TYP_PRODUCT_ENTRIES.COD_TYPE
            AND INVENTORY.COD_SUPPLIER = SUPPLIER.COD_SUPPLIER;
		ELSE 
			SELECT COD_ENTRIES, PRODUCT_ENTRIES.COD_PRODUCT, NAM_PRODUCT, DES_ENTRIES, PRODUCT_ENTRIES.COD_TYPE, NAM_TYPE, CANT_PRODUCT, NUM_LOT, NAM_SUPPLIER,
            CONCAT(FIRST_NAME, ' ', LAST_NAME) USER_NAME, DAT_ENTRIES
            FROM PRODUCT_ENTRIES, INVENTORY, USER, TYP_PRODUCT_ENTRIES, SUPPLIER
            WHERE PRODUCT_ENTRIES.COD_PRODUCT = INVENTORY.COD_PRODUCT
            AND PRODUCT_ENTRIES.COD_USER = USER.COD_USER
            AND PRODUCT_ENTRIES.COD_TYPE = TYP_PRODUCT_ENTRIES.COD_TYPE
            AND INVENTORY.COD_SUPPLIER = SUPPLIER.COD_SUPPLIER
            AND COD_ENTRIES = _COD_ENTRIES;
	END IF;
END;
//

DELIMITER //
CREATE PROCEDURE SP_SEL_PRODUCT_OUTPUT(
						IN _COD_OUTPUT BIGINT
)BEGIN
	IF  _COD_OUTPUT = 0 THEN
			SELECT COD_OUTPUT, PRODUCT_OUTPUT.COD_PRODUCT, NAM_PRODUCT, DES_OUTPUT, PRODUCT_OUTPUT.COD_TYPE, NAM_TYPE, CANT_PRODUCT, NUM_LOT, NAM_SUPPLIER,
            CONCAT(FIRST_NAME, ' ', LAST_NAME) USER_NAME, DAT_OUTPUT
            FROM PRODUCT_OUTPUT, INVENTORY, USER, TYP_PRODUCT_OUTPUT, SUPPLIER
            WHERE PRODUCT_OUTPUT.COD_PRODUCT = INVENTORY.COD_PRODUCT
            AND PRODUCT_OUTPUT.COD_USER = USER.COD_USER
            AND INVENTORY.COD_SUPPLIER = SUPPLIER.COD_SUPPLIER
            AND PRODUCT_OUTPUT.COD_TYPE = TYP_PRODUCT_OUTPUT.COD_TYPE;
		ELSE 
			SELECT COD_OUTPUT, PRODUCT_OUTPUT.COD_PRODUCT, NAM_PRODUCT, DES_OUTPUT, PRODUCT_OUTPUT.COD_TYPE, NAM_TYPE, CANT_PRODUCT, NUM_LOT, NAM_SUPPLIER,
            CONCAT(FIRST_NAME, ' ', LAST_NAME) USER_NAME, DAT_OUTPUT
            FROM PRODUCT_OUTPUT, INVENTORY, USER, TYP_PRODUCT_OUTPUT, SUPPLIER
            WHERE PRODUCT_OUTPUT.COD_PRODUCT = INVENTORY.COD_PRODUCT
            AND PRODUCT_OUTPUT.COD_USER = USER.COD_USER
            AND PRODUCT_OUTPUT.COD_TYPE = TYP_PRODUCT_OUTPUT.COD_TYPE
            AND INVENTORY.COD_SUPPLIER = SUPPLIER.COD_SUPPLIER
            AND COD_OUTPUT = _COD_OUTPUT;
	END IF;
END;
//

DELIMITER //
CREATE PROCEDURE SP_DEL_INVENTORY(
						IN _COD_PRODUCT VARCHAR(255)
)BEGIN 
			DELETE FROM INVENTORY 
            WHERE COD_PRODUCT = _COD_PRODUCT;
END;
//

DELIMITER //
CREATE  PROCEDURE SP_DEL_INVENTORY_DETAIL(
						IN _COD_DETAIL BIGINT
)BEGIN 
			DELETE FROM INVENTORY_DETAIL
            WHERE COD_DETAIL = _COD_DETAIL;
END;
//

DELIMITER //
CREATE PROCEDURE SP_DEL_PRODUCT_ENTRIES(
						IN _COD_ENTRIES BIGINT
)
BEGIN 
SET @ENTRADAS = (SELECT CANT_PRODUCT FROM PRODUCT_ENTRIES WHERE COD_ENTRIES = _COD_ENTRIES);
SET @COD_PRODUCT = (SELECT COD_PRODUCT FROM PRODUCT_ENTRIES WHERE COD_ENTRIES = _COD_ENTRIES);
SET @NUM_LOTE =  (SELECT NUM_LOT FROM PRODUCT_ENTRIES WHERE COD_ENTRIES = _COD_ENTRIES);
    
    UPDATE INVENTORY_DETAIL
	SET CANT_PRODUCTS =  CANT_PRODUCTS - @ENTRADAS
	WHERE COD_PRODUCT = @COD_PRODUCT
    AND NUM_LOT = @NUM_LOTE;
    
	DELETE FROM PRODUCT_ENTRIES
	WHERE COD_ENTRIES = _COD_ENTRIES;
    
    SET @CANT_TOTAL = (SELECT (SUM(CANT_PRODUCTS)) FROM INVENTORY_DETAIL WHERE COD_PRODUCT = @COD_PRODUCT);

	UPDATE INVENTORY
	SET CANT_TOTAL = @CANT_TOTAL
	WHERE COD_PRODUCT = @COD_PRODUCT;
END
//

/*###### MODULO DE CONTABILIDAD #####*/

-- INSERT EN LA TABLA DE `CUENTAS POR COBRAR`
DELIMITER //
CREATE PROCEDURE SP_INS_ACCOUNTS_RECEIVABLE(
					 IN _COD_INVOICE BIGINT,
						_DESCRIPTION TEXT,
                        _TOT_BALANCE DECIMAL(10,2),
                        _DAT_LIMIT DATE
)BEGIN
-- INSERTAR EN LA BASE DE DATOS
     INSERT INTO ACCOUNTS_RECEIVABLE(COD_INVOICE, DESCRIPTION, TOT_BALANCE, DAT_LIMIT)
     VALUES(_COD_INVOICE, _DESCRIPTION, _TOT_BALANCE, _DAT_LIMIT);
END;
//

-- INSERT EN LA TABLA DE `CUOTAS POR COBRAR`
DELIMITER // 
CREATE PROCEDURE SP_INS_FEES_RECEIVABLE(
						IN _COD_ACC_RECEIVABLE BIGINT,
                           _AMOUNT DECIMAL(10,2),
                           _DAT_PAY DATE,
                           _COD_TYP_PAY BIGINT
) BEGIN
   START TRANSACTION;
-- INSERTAR A LA BASE DE DATOS
   INSERT INTO FEES_RECEIVABLE(COD_ACC_RECEIVABLE, AMOUNT, DAT_PAY, COD_TYP_PAY)
   VALUES(_COD_ACC_RECEIVABLE, _AMOUNT, _DAT_PAY, _COD_TYP_PAY);
   
    IF _AMOUNT <= (SELECT TOT_BALANCE FROM ACCOUNTS_RECEIVABLE WHERE COD_ACC_RECEIVABLE = _COD_ACC_RECEIVABLE) THEN 
          UPDATE ACCOUNTS_RECEIVABLE
          SET TOT_BALANCE = TOT_BALANCE - _AMOUNT
		  WHERE COD_ACC_RECEIVABLE = _COD_ACC_RECEIVABLE;
          
		  COMMIT;
          
    ELSE
          ROLLBACK;
          SIGNAL SQLSTATE '45000'
		  SET MESSAGE_TEXT = 'La cuota de pago es mayor al saldo pendiente a pagar.';

    END IF;
   
  END;
//

-- INSERT EN LA TABLA DE `CUENTAS POR PAGAR`
DELIMITER //
CREATE PROCEDURE SP_INS_ACCOUNTS_TO_PAY(
					IN _COD_INVOICE BIGINT,
					   _DESCRIPTION TEXT,
                       _TOT_BALANCE DECIMAL(10,2),
                       _DATE_LIMIT DATE
) BEGIN

	        IF NOT EXISTS(SELECT COD_INVOICE FROM PURCHASE_INVOICE WHERE COD_INVOICE = _COD_INVOICE) THEN
              ROLLBACK;
			  SIGNAL SQLSTATE '45000'
              SET MESSAGE_TEXT = 'La factura de compra no existe.';
            ELSE
               -- INSERTAR EN LA BASE DE DATOS
	           INSERT INTO ACCOUNTS_TO_PAY(COD_INVOICE, DESCRIPTION, TOT_BALANCE, DATE_LIMIT)
               VALUES(_COD_INVOICE, _DESCRIPTION, _TOT_BALANCE, _DATE_LIMIT);
            END IF;
 END;
// 

-- INSERT EN LA TABLA DE `CUOTAS POR PAGAR`
DELIMITER //
CREATE PROCEDURE SP_INS_FEES_TO_PAY(
					IN _COD_ACC_PAY BIGINT,
					   _AMOUNT DECIMAL(10,2),
                       _DATE_PAY DATE,
                       _COD_TYP_PAY BIGINT
) BEGIN
   START TRANSACTION;
   -- INSERTAR A LA BASE DE DATOS
    INSERT INTO FEES_TO_PAY(COD_ACC_PAY, AMOUNT, DATE_PAY, COD_TYP_PAY)
    VALUES(_COD_ACC_PAY, _AMOUNT, _DATE_PAY, _COD_TYP_PAY);
   
    IF _AMOUNT <= (SELECT TOT_BALANCE FROM ACCOUNTS_TO_PAY WHERE COD_ACC_PAY= _COD_ACC_PAY) THEN 
          UPDATE ACCOUNTS_TO_PAY
          SET TOT_BALANCE = TOT_BALANCE - _AMOUNT
		  WHERE COD_ACC_PAY = _COD_ACC_PAY;
          
		   COMMIT;
    ELSE
          ROLLBACK;
          SIGNAL SQLSTATE '45000'
		  SET MESSAGE_TEXT = 'La cuota de pago es mayor al saldo pendiente a pagar.';
    END IF;
  END;
//

-- INSERT EN LA TABLA `PLANILLA DE PAGOS`
DELIMITER //
CREATE PROCEDURE SP_INS_PAY_FORM(
                     IN _COD_USER BIGINT,
						_HOURS_WORKED INT,
                        _AMO_GROSS DECIMAL(10,2),
                        _BONUS DECIMAL(10,2),
                        _TOT_DEDUCTIONS DECIMAL(10,2),
                        _NET_SALARY DECIMAL(10,2),
                        _DAT_PAYMENT DATE
) BEGIN
  
  SET @USUARIOS = (SELECT COUNT(COD_USER) FROM PAY_FORM WHERE COD_USER = _COD_USER AND MONTHNAME(DAT_PAYMENT) = MONTHNAME(_DAT_PAYMENT) AND YEAR(DAT_PAYMENT)  = YEAR(_DAT_PAYMENT));
  
           IF NOT EXISTS(SELECT COD_USER FROM USER WHERE COD_USER = _COD_USER) THEN
             ROLLBACK;
		     SIGNAL SQLSTATE '45000'
             SET MESSAGE_TEXT = 'El usuario no existe.';
           ELSE
              -- INSERTAR EN LA BASE DE DATOS
             INSERT INTO PAY_FORM(COD_USER, HOURS_WORKED, AMO_GROSS, BONUS, TOT_DEDUCTIONS, NET_SALARY, DAT_PAYMENT)
	         VALUES(_COD_USER, _HOURS_WORKED, _AMO_GROSS, _BONUS, _TOT_DEDUCTIONS, _NET_SALARY, _DAT_PAYMENT);
           END IF;

           IF @USUARIOS >= 1 THEN
            SIGNAL SQLSTATE '45000'
	        SET MESSAGE_TEXT = 'El usuario ya fue registrado durante este mes.';
           END IF;
  END
//

-- UPDATE EN LA TABLA `PLANILLA DE PAGOS`
DELIMITER //
CREATE PROCEDURE SP_UPD_PAY_FORM(
					IN _COD_PAY_FORM BIGINT,
                       _COD_USER BIGINT,
                       _HOURS_WORKED INT,
                       _AMO_GROSS DECIMAL(10,2),
                       _BONUS DECIMAL(10,2),
                       _TOT_DEDUCTIONS DECIMAL(10,2),
                       _NET_SALARY DECIMAL(10,2),
                       _DAT_PAYMENT DATE 
)
BEGIN
		   START TRANSACTION;
			-- UPDATE EN LA BASE DE DATOS
           UPDATE PAY_FORM
           SET HOURS_WORKED = _HOURS_WORKED, AMO_GROSS = _AMO_GROSS, BONUS = _BONUS, TOT_DEDUCTIONS = _TOT_DEDUCTIONS, NET_SALARY = _NET_SALARY, DAT_PAYMENT = _DAT_PAYMENT, COD_USER = _COD_USER
           WHERE COD_PAY_FORM = _COD_PAY_FORM;
           
           SET @USUARIOS = (SELECT COUNT(COD_USER) FROM PAY_FORM WHERE COD_USER = _COD_USER AND MONTHNAME(DAT_PAYMENT) = MONTHNAME(_DAT_PAYMENT) AND YEAR(DAT_PAYMENT)  = YEAR(_DAT_PAYMENT));
           
           IF @USUARIOS >= 2 THEN
            ROLLBACK;
            SIGNAL SQLSTATE '45000'
	        SET MESSAGE_TEXT = 'El usuario ya fue registrado durante este mes.';
           END IF;
           
           COMMIT;

  END
  //

-- INSERT EN LA TABLA `DEVOLUCIONES SOBRE COMPRA/VENTA`
DELIMITER //
CREATE PROCEDURE SP_INS_RETURNS(
                     IN _COD_PRODUCT BIGINT, 
                        _DESCRIPTION TEXT, 
                        _CANT INT, 
                        _AMOUNT DECIMAL(10,2),
                        _TYP_RETURN ENUM('Venta', 'Compra'),
                        _COD_USER BIGINT, 
                        _DAT_RETURN DATE
) BEGIN
  -- INSERTAR EN LA BASE DE DATOS
	 INSERT INTO RETURNS(COD_PRODUCT, DESCRIPTION, CANT, AMOUNT, TYP_RETURN, COD_USER, DAT_RETURN)
     VALUES(_COD_PRODUCT, _DESCRIPTION, _CANT, _AMOUNT, _TYP_RETURN, _COD_USER, _DAT_RETURN);
  END;
//

-- UPDATE EN LA TABLA `DEVOLUCIONES SOBRE COMPRA/VENTA`
DELIMITER //
CREATE PROCEDURE SP_UPD_RETURNS(
                    IN _COD_RETURN BIGINT, 
                       _COD_PRODUCT BIGINT,
                       _DESCRIPTION TEXT, 
                       _CANT INT,
                       _AMOUNT DECIMAL(10,2),
                       _TYP_RETURN ENUM('Venta', 'Compra'),
                       _COD_USER BIGINT, 
                       _DAT_RETURN DATE
) BEGIN
    -- UPDATE EN LA BASE DE DATOS
       UPDATE RETURNS
       SET COD_PRODUCT = _COD_PRODUCT, DESCRIPTION = _DESCRIPTION, CANT = _CANT, AMOUNT = _AMOUNT, TYP_RETURN = _TYP_RETURN, COD_USER = _COD_USER, DAT_RETURN = _DAT_RETURN
       WHERE COD_RETURN = _COD_RETURN;
  END;
//

-- INSERT EN LA TABLA `REBAJAS SOBRE COMPRA/VENTA`
DELIMITER //
CREATE PROCEDURE SP_INS_DISCOUNTS(
                   IN _COD_PRODUCT BIGINT, 
				      _DESCRIPTION TEXT, 
					  _AMOUNT DECIMAL(10,2),
					  _TYP_SALES ENUM('Venta', 'Compra'),
					  _COD_USER BIGINT, 
					  _DAT_SALE DATE
) BEGIN
   -- INSERTAR EN LA BASE DE DATOS
      INSERT INTO DISCOUNTS(COD_PRODUCT, DESCRIPTION, AMOUNT, TYP_SALES, COD_USER, DAT_SALE)
	  VALUES(_COD_PRODUCT, _DESCRIPTION, _AMOUNT, _TYP_SALES, _COD_USER, _DAT_SALE);
  END; 
//

-- UPDATE EN LA TABLA `REBAJAS SOBRE COMPRA/VENTA`
DELIMITER //
CREATE PROCEDURE SP_UPD_DISCOUNTS(
					IN _COD_DISCOUNT BIGINT, 
                       _COD_PRODUCT BIGINT, 
                       _DESCRIPTION TEXT, 
                       _AMOUNT DECIMAL(10,2),
                       _TYP_SALES ENUM('Venta', 'Compra'),
                       _COD_USER BIGINT, 
                       _DAT_SALE DATE 
) BEGIN
  -- UPDATE EN LA BASE DE DATOS
     UPDATE DISCOUNTS
     SET COD_PRODUCT = _COD_PRODUCT, DESCRIPTION = _DESCRIPTION, AMOUNT = _AMOUNT, TYP_SALES = _TYP_SALES, COD_USER = _COD_USER, DAT_SALE = _DAT_SALE
     WHERE COD_DISCOUNT = _COD_DISCOUNT;
  END;
//

DELIMITER //
CREATE PROCEDURE SP_SEL_NOTIFICATIONS(
									IN _COD_NOTIFICATION BIGINT
)BEGIN
	IF _COD_NOTIFICATION = 0 THEN
		SELECT NAM_ROLE, MESSAGE, TYP_NOTIFICATION, DAT_NOTIFICATION
        FROM ROLE, NOTIFICATIONS
        WHERE ROLE.COD_ROLE = NOTIFICATIONS.COD_ROLE;
	ELSE
		SELECT NAM_ROLE, MESSAGE, TYP_NOTIFICATION, DAT_NOTIFICATION
        FROM ROLE, NOTIFICATIONS
        WHERE ROLE.COD_ROLE = NOTIFICATIONS.COD_ROLE
        AND COD_NOTIFICATION = _COD_NOTIFICATION;
	END IF;
END;
//

DELIMITER //
CREATE PROCEDURE SP_INS_NOTIFICATIONS(
								IN _COD_ROLE BIGINT,
								   _MESSAGE TEXT,
                                   _TYP_NOTIFICATION VARCHAR(255)
)BEGIN
	-- INSERTAR NOTIFICACION
	INSERT INTO NOTIFICATIONS(COD_ROLE, MESSAGE, TYP_NOTIFICATION, DAT_NOTIFICATION)
    VALUES(_COD_ROLE, _MESSAGE, _TYP_NOTIFICATION, CURDATE());
END;
//

DELIMITER //
CREATE PROCEDURE SP_INS_USER_NOTIFICATIONS(
											IN _COD_USER BIGINT,
                                               _COD_NOTIFICATION BIGINT,
                                               _IS_VIEW ENUM('1', '0')
)BEGIN
	INSERT INTO USER_NOTIFICATIONS(COD_USER, COD_NOTIFICATION, IS_VIEW)
    VALUES(_COD_USER, _COD_NOTIFICATION, _IS_VIEW);
END;
//

-- MENDEL --
DELIMITER //
CREATE PROCEDURE SP_SEL_PAY_FORM(
                       IN _COD_PAY_FORM BIGINT
)BEGIN
   IF _COD_PAY_FORM = 0 THEN
	  SELECT COD_PAY_FORM, PAY_FORM.COD_USER, FIRST_NAME, LAST_NAME, HOURS_WORKED, AMO_GROSS, BONUS, TOT_DEDUCTIONS, NET_SALARY, DAT_PAYMENT
      FROM PAY_FORM, USER 
      WHERE USER.COD_USER = PAY_FORM.COD_USER;
   ELSE
	  SELECT COD_PAY_FORM, PAY_FORM.COD_USER, FIRST_NAME, LAST_NAME, HOURS_WORKED, AMO_GROSS, BONUS, TOT_DEDUCTIONS, NET_SALARY, DAT_PAYMENT
      FROM PAY_FORM, USER 
      WHERE USER.COD_USER = PAY_FORM.COD_USER
      AND COD_PAY_FORM = _COD_PAY_FORM;
   END IF;
 END;
// 

DELIMITER // 
CREATE PROCEDURE SP_DEL_PAY_FORM(
					IN _COD_PAY_FORM BIGINT
)BEGIN

 DELETE 
 FROM PAY_FORM 
 WHERE COD_PAY_FORM = _COD_PAY_FORM; 

 END;
 //
 
 DELIMITER //
 CREATE PROCEDURE SP_SEL_ACCOUNTS_RECEIVABLE(
                      IN _COD_ACC_RECIVABLE BIGINT
) BEGIN
	IF _COD_ACC_RECIVABLE = 0 THEN
        SELECT COD_ACC_RECEIVABLE, IDENTITY, FIRST_NAME, LAST_NAME, DESCRIPTION, TOT_BALANCE, DAT_LIMIT, STARTING_AMOUNT
		FROM ACCOUNTS_RECEIVABLE, CLIENT, SALES_INVOICE
        WHERE SALES_INVOICE.COD_INVOICE = ACCOUNTS_RECEIVABLE.COD_INVOICE
        AND CLIENT.COD_CLIENT = SALES_INVOICE.COD_CLIENT
        AND TOT_BALANCE > 0;
   ELSE
       SELECT COD_ACC_RECEIVABLE, IDENTITY, FIRST_NAME, LAST_NAME, DESCRIPTION, TOT_BALANCE, DAT_LIMIT, STARTING_AMOUNT
		FROM ACCOUNTS_RECEIVABLE, CLIENT, SALES_INVOICE
        WHERE SALES_INVOICE.COD_INVOICE = ACCOUNTS_RECEIVABLE.COD_INVOICE
        AND CLIENT.COD_CLIENT = SALES_INVOICE.COD_CLIENT
        AND COD_ACC_RECEIVABLE = _COD_ACC_RECIVABLE
        AND TOT_BALANCE > 0;
	END IF;
  END
 //ND
 //
 
 DELIMITER //
 CREATE PROCEDURE SP_SEL_ACCOUNTS_TO_PAY(
                      IN _COD_ACC_PAY BIGINT
) BEGIN
    IF _COD_ACC_PAY = 0 THEN
       SELECT COD_ACC_PAY, DESCRIPTION, TOT_BALANCE, DATE_LIMIT
       FROM ACCOUNTS_TO_PAY, PURCHASE_INVOICE
       WHERE PURCHASE_INVOICE.COD_INVOICE = ACCOUNTS_TO_PAY.COD_INVOICE
       AND TOT_BALANCE > 0;
    ELSE
       SELECT COD_ACC_PAY, DESCRIPTION, TOT_BALANCE, DATE_LIMIT
       FROM ACCOUNTS_TO_PAY, PURCHASE_INVOICE
       WHERE PURCHASE_INVOICE.COD_INVOICE = ACCOUNTS_TO_PAY.COD_INVOICE
       AND COD_ACC_PAY = _COD_ACC_PAY
       AND TOT_BALANCE > 0;
	END IF;
  END
 //
 
 DELIMITER //
 CREATE PROCEDURE SP_UPD_ACCOUNTS_TO_PAY(
				      IN _COD_ACC_PAY BIGINT,
                         _DESCRIPTION TEXT,
                         _DATE_LIMIT DATE
) BEGIN 
    -- UPDATE EN LA BASE DE DATOS
    UPDATE ACCOUNTS_TO_PAY
    SET DESCRIPTION = _DESCRIPTION, DATE_LIMIT = _DATE_LIMIT
    WHERE COD_ACC_PAY = _COD_ACC_PAY;
  END
 //
 
 DELIMITER //
 CREATE PROCEDURE SP_DEL_FEES_RECEIVABLE(
				     IN _COD_FEES BIGINT
) BEGIN
   SET @AMOUNT_DELETE = (SELECT AMOUNT FROM FEES_RECEIVABLE WHERE COD_FEES = _COD_FEES);
   SET @COD_ACC_RECEIVABLE = (SELECT COD_ACC_RECEIVABLE FROM FEES_RECEIVABLE WHERE COD_FEES = _COD_FEES);
   
   DELETE 
   FROM FEES_RECEIVABLE
   WHERE COD_FEES = _COD_FEES;
   
   UPDATE ACCOUNTS_RECEIVABLE
   SET TOT_BALANCE = TOT_BALANCE + @AMOUNT_DELETE
   WHERE COD_ACC_RECEIVABLE = @COD_ACC_RECEIVABLE;
   
  END
 //
 
 DELIMITER //
 CREATE PROCEDURE SP_SEL_FEES_RECEIVABLE(
					 IN _COD_ACC_RECEIVABLE BIGINT
) BEGIN
      SELECT COD_FEES, IDENTITY, FIRST_NAME, LAST_NAME, AMOUNT, DAT_PAY, NAM_TYPE_PAY
      FROM FEES_RECEIVABLE, CLIENT, ACCOUNTS_RECEIVABLE, SALES_INVOICE, TYPE_TO_PAY
	  WHERE CLIENT.COD_CLIENT = SALES_INVOICE.COD_CLIENT
      AND TYPE_TO_PAY.COD_TYP_PAY = FEES_RECEIVABLE.COD_TYP_PAY
      AND SALES_INVOICE.COD_INVOICE = ACCOUNTS_RECEIVABLE.COD_INVOICE
      AND ACCOUNTS_RECEIVABLE.COD_ACC_RECEIVABLE = FEES_RECEIVABLE.COD_ACC_RECEIVABLE
      AND ACCOUNTS_RECEIVABLE.COD_ACC_RECEIVABLE = _COD_ACC_RECEIVABLE;
  END
 //
 
 DELIMITER //
 CREATE PROCEDURE SP_SEL_FEES_TO_PAY(
                      IN _COD_ACC_PAY BIGINT
) BEGIN
      SELECT COD_FEES, AMOUNT, DATE_PAY, NAM_TYPE_PAY
      FROM FEES_TO_PAY, ACCOUNTS_TO_PAY, PURCHASE_INVOICE, TYPE_TO_PAY
      WHERE TYPE_TO_PAY.COD_TYP_PAY = FEES_TO_PAY.COD_TYP_PAY
      AND PURCHASE_INVOICE.COD_INVOICE = ACCOUNTS_TO_PAY.COD_INVOICE
      AND ACCOUNTS_TO_PAY.COD_ACC_PAY = FEES_TO_PAY.COD_ACC_PAY
      AND ACCOUNTS_TO_PAY.COD_ACC_PAY = _COD_ACC_PAY;
  END
 //
 
 DELIMITER //
 CREATE PROCEDURE SP_DEL_FEES_TO_PAY(
				     IN _COD_FEES BIGINT
) BEGIN
   SET @AMOUNT_DELETE = (SELECT AMOUNT FROM FEES_TO_PAY WHERE COD_FEES = _COD_FEES);
   SET @COD_ACC_PAY = (SELECT COD_ACC_PAY FROM FEES_TO_PAY WHERE COD_FEES = _COD_FEES);
   
   DELETE 
   FROM FEES_TO_PAY
   WHERE COD_FEES = _COD_FEES;
   
   UPDATE ACCOUNTS_TO_PAY
   SET TOT_BALANCE = TOT_BALANCE + @AMOUNT_DELETE
   WHERE COD_ACC_PAY = @COD_ACC_PAY;
   
  END
 //
 
 DELIMITER //
 CREATE PROCEDURE SP_SEL_SALES_DISCOUNTS(
				     IN _COD_DISCOUNT BIGINT
) BEGIN
   IF _COD_DISCOUNT = 0 THEN 
      SELECT COD_DISCOUNT, SALES_INVOICE.COD_INVOICE, CONCAT(CLIENT.FIRST_NAME, ' ', CLIENT.LAST_NAME) CLIENT_NAME, 
      DESCRIPTION, AMOUNT, NAM_TYPE_PAY, CONCAT(USER.FIRST_NAME, ' ', USER.LAST_NAME) USER_NAME
      FROM SALES_DISCOUNTS, SALES_INVOICE, TYPE_TO_PAY, CLIENT, USER
      WHERE CLIENT.COD_CLIENT = SALES_INVOICE.COD_CLIENT
      AND USER.COD_USER = SALES_INVOICE.COD_USER
      AND TYPE_TO_PAY.COD_TYP_PAY = SALES_INVOICE.COD_TYP_PAY
      AND SALES_INVOICE.COD_INVOICE = SALES_DISCOUNTS.COD_INVOICE;
   ELSE
      SELECT COD_DISCOUNT, SALES_INVOICE.COD_INVOICE, CONCAT(CLIENT.FIRST_NAME, ' ', CLIENT.LAST_NAME) CLIENT_NAME, 
      DESCRIPTION, AMOUNT, NAM_TYPE_PAY, CONCAT(USER.FIRST_NAME, ' ', USER.LAST_NAME) USER_NAME
      FROM SALES_DISCOUNTS, SALES_INVOICE, TYPE_TO_PAY, CLIENT, USER
      WHERE CLIENT.COD_CLIENT = SALES_INVOICE.COD_CLIENT
      AND USER.COD_USER = SALES_INVOICE.COD_USER
      AND TYPE_TO_PAY.COD_TYP_PAY = SALES_INVOICE.COD_TYP_PAY
      AND SALES_INVOICE.COD_INVOICE = SALES_DISCOUNTS.COD_INVOICE
      AND COD_DISCOUNT = _COD_DISCOUNT;
   END IF;
  END
 //
 
 DELIMITER //
 CREATE PROCEDURE SP_DEL_SALES_RETURNS(
                     IN _COD_RETURN BIGINT
) BEGIN
    DELETE 
	FROM SALES_RETURNS
    WHERE COD_RETURN = _COD_RETURN;
  END
 //
 
DELIMITER //
 CREATE PROCEDURE SP_SEL_SALES_RETURNS(
                     IN _COD_RETURN VARCHAR(255)
) BEGIN
   IF _COD_RETURN = 0 THEN
      SELECT COD_RETURN, INVENTORY.COD_PRODUCT, NAM_PRODUCT, DESCRIPTION, CANT, NAM_TYPE_PRODUCT, AMOUNT, DAT_RETURN,
      CONCAT(USER.FIRST_NAME, ' ', USER.LAST_NAME) USER_NAME
      FROM SALES_RETURNS, INVENTORY, TYPE_PRODUCT, USER
      WHERE USER.COD_USER = SALES_RETURNS.COD_USER
      AND TYPE_PRODUCT.COD_TYP_PRODUCT = INVENTORY.COD_TYP_PRODUCT
      AND INVENTORY.COD_PRODUCT = SALES_RETURNS.COD_PRODUCT;
   ELSE
      SELECT COD_RETURN, INVENTORY.COD_PRODUCT, NAM_PRODUCT, DESCRIPTION, CANT, NAM_TYPE_PRODUCT, AMOUNT, DAT_RETURN,
      CONCAT(USER.FIRST_NAME, ' ', USER.LAST_NAME) USER_NAME
      FROM SALES_RETURNS, INVENTORY, TYPE_PRODUCT, USER
      WHERE USER.COD_USER = SALES_RETURNS.COD_USER
      AND TYPE_PRODUCT.COD_TYP_PRODUCT = INVENTORY.COD_TYP_PRODUCT
      AND INVENTORY.COD_PRODUCT = SALES_RETURNS.COD_PRODUCT
      AND COD_RETURN = _COD_RETURN;
	END IF;
  END
 //

 DELIMITER //
CREATE PROCEDURE SP_DEL_ACCOUNTS_TO_PAY(
				    IN _COD_ACC_PAY BIGINT
) BEGIN
    DELETE 
	FROM ACCOUNTS_TO_PAY
    WHERE COD_ACC_PAY = _COD_ACC_PAY;
  END
//

DELIMITER //
CREATE PROCEDURE SP_INS_SALES_RETURNS(
				   IN _COD_PRODUCT VARCHAR(255),
                      _DESCRIPTION TEXT,
                      _CANT INT,
                      _AMOUNT DECIMAL(10,2),
                      _COD_USER BIGINT,
                      _DAT_RETURN DATE
) BEGIN
			  IF NOT EXISTS(SELECT COD_PRODUCT FROM INVENTORY WHERE COD_PRODUCT = _COD_PRODUCT) THEN
                   ROLLBACK;
			       SIGNAL SQLSTATE '45000'
			       SET MESSAGE_TEXT = 'El producto no existe.';
              ELSE
			       -- INSERTAR EN LA BASE DE DATOS
				  INSERT INTO SALES_RETURNS(COD_PRODUCT, DESCRIPTION, CANT, AMOUNT, COD_USER, DAT_RETURN)
				  VALUES(_COD_PRODUCT, _DESCRIPTION, _CANT, _AMOUNT, _COD_USER, _DAT_RETURN);
			  END IF;
  END
//

DELIMITER //
CREATE PROCEDURE SP_UPD_SALES_RETURNS(
                    IN _COD_RETURN VARCHAR(255),
                       _DESCRIPTION TEXT,
                       _CANT INT,
                       _AMOUNT DECIMAL(10,2),
                       _DAT_RETURN DATE
) BEGIN
  -- UPDATE EN LA BASE DE DATOS
           UPDATE SALES_RETURNS
           SET DESCRIPTION = _DESCRIPTION, CANT = _CANT, AMOUNT = _AMOUNT, DAT_RETURN = _DAT_RETURN
           WHERE COD_RETURN = _COD_RETURN;
  END
//
-- LUIS
DELIMITER //
CREATE PROCEDURE SP_UPD_PROFILE(IN _COD_USER BIGINT,
									_NAM_CITY VARCHAR(255),
									_ADDRESS TEXT,
									_DAT_BIRTHDAY DATE
)BEGIN
	UPDATE USER
    SET NAM_CITY = _NAM_CITY,
    ADDRESS = _ADDRESS,
    DAT_BIRTHDAY = _DAT_BIRTHDAY
    WHERE COD_USER = _COD_USER;
END
//

DELIMITER //
CREATE PROCEDURE SP_SEL_PASSWORD(IN _COD_USER BIGINT
)BEGIN
	SELECT USER_PASSWORD FROM LOGIN
    WHERE COD_USER = _COD_USER;
END;
//

DELIMITER //
CREATE PROCEDURE SP_UPD_PASSWORD(IN _COD_USER BIGINT,
									_USER_PASSWORD VARCHAR(255)
)BEGIN
	SET @DAYS_EXPIRED = (SELECT NUM_DAYS_PASSWORD_EXPIRED FROM SYSTEM_SETTINGS WHERE COD_SETTING = 1);

	UPDATE LOGIN
    SET USER_PASSWORD = _USER_PASSWORD,
    DAT_EXP = DATE_ADD(NOW(), INTERVAL @DAYS_EXPIRED DAY)
    WHERE COD_USER = _COD_USER;
END;
//

DELIMITER //
CREATE PROCEDURE SP_SEL_USER_INFORMATION(IN _COD_USER BIGINT
)BEGIN
	SELECT LOGIN.COD_ROLE, FIRST_NAME, MIDDLE_NAME, LAST_NAME, NAM_ROLE, NAM_CITY, ADDRESS, DAT_BIRTHDAY
    FROM USER, LOGIN, ROLE
    WHERE USER.COD_USER = LOGIN.COD_USER
    AND LOGIN.COD_ROLE = ROLE.COD_ROLE
    AND USER.COD_USER = _COD_USER;
END
//

DELIMITER //
CREATE PROCEDURE SP_SEL_PROFILE_PIC(IN _COD_USER BIGINT
)BEGIN
	SELECT IMG_USER FROM USER
    WHERE COD_USER = _COD_USER;
END;
//

DELIMITER //
CREATE PROCEDURE SP_UPD_IMG_PROFILE(IN _COD_USER BIGINT,
										_IMG_USER LONGBLOB
										
)BEGIN
	UPDATE USER
    SET IMG_USER = _IMG_USER
    WHERE COD_USER = _COD_USER;
END;
//

DELIMITER //
CREATE PROCEDURE SP_SEL_CATEGORIES(
)BEGIN
	SELECT DISTINCT INVENTORY.COD_CATEGORY, NAM_CATEGORY FROM CATEGORY, INVENTORY
    WHERE INVENTORY.COD_CATEGORY = CATEGORY.COD_CATEGORY
    ORDER BY NAM_CATEGORY;
END;
//

DELIMITER //
CREATE PROCEDURE SP_SEL_PRODUCTS(IN _COD_CATEGORY BIGINT
)BEGIN
	SELECT COD_PRODUCT, NAM_PRODUCT FROM INVENTORY 
    WHERE COD_CATEGORY = _COD_CATEGORY;
END;
//

DELIMITER //
CREATE PROCEDURE SP_SELECT_CATEGORY(
)BEGIN
	SELECT COD_CATEGORY, NAM_CATEGORY FROM CATEGORY WHERE COD_STATUS = 1;
END
//

DELIMITER // 
CREATE PROCEDURE SP_VERIFY_ROLE(IN _COD_ROLE BIGINT,
									_COD_MODULE BIGINT
)BEGIN
	SELECT COD_ROLE, COD_MODULE, INS, DEL, UPD, QUE
    FROM PERMISSIONS
    WHERE COD_ROLE = _COD_ROLE
    AND COD_MODULE = _COD_MODULE;
END;
//

DELIMITER //
CREATE PROCEDURE SP_SEL_PRODUCTSSALES(
)BEGIN
	SELECT NAM_PRODUCT, SUM(CANT_PRODUCTS) TOT_PRODUCTS FROM 
	INVENTORY, SALE_DETAIL
	WHERE INVENTORY.COD_PRODUCT = SALE_DETAIL.COD_PRODUCT
	GROUP BY NAM_PRODUCT;
END;
//

DELIMITER //
CREATE PROCEDURE SP_SEL_ROLES(
)BEGIN	
	SELECT * FROM ROLE;
END
//

DELIMITER //
CREATE PROCEDURE SP_INS_ROLE(IN _NAM_ROLE VARCHAR(255),
								_DES_ROLE TEXT,
                                _COD_MODULE BIGINT,
                                 _COD_TABLE BIGINT,
                                _QUE BOOLEAN,
                                _INS BOOLEAN,
                                _UPD BOOLEAN,
                                _DEL BOOLEAN
)BEGIN
	IF NOT EXISTS(SELECT * FROM ROLE WHERE NAM_ROLE = _NAM_ROLE) THEN
		INSERT INTO ROLE(NAM_ROLE, DES_ROLE)
        VALUES(_NAM_ROLE, _DES_ROLE);
    ELSE
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El nombre de rol ya se encuentra registrado.';
    END IF;
    
    SET @COD_ROLE = (SELECT MAX(COD_ROLE) FROM ROLE);

	INSERT INTO PERMISSIONS(COD_ROLE, COD_MODULE, COD_TABLE, INS, DEL, UPD, QUE)
    VALUES(@COD_ROLE, _COD_MODULE, _COD_TABLE, _INS, _DEL, _UPD, _QUE);
END;
//

DELIMITER //
CREATE PROCEDURE SP_SALES_WEEK(
)BEGIN
	SELECT SUM(TOT_SALE) TOTAL_VENTAS FROM SALES_INVOICE
	WHERE DAT_INVOICE BETWEEN DATE_SUB(CURDATE(), INTERVAL 7 DAY) AND CURDATE();
END;
//

DELIMITER //
CREATE PROCEDURE SP_SALES_MONTH(
)BEGIN
	SELECT SUM(TOT_SALE) TOTAL_VENTAS FROM SALES_INVOICE
	WHERE DAT_INVOICE BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE();
END;
//

DELIMITER //
CREATE PROCEDURE SP_GRAFICA_ROLES(
)BEGIN
	SELECT NAM_ROLE, COUNT(LOGIN.COD_ROLE) CANT FROM LOGIN, ROLE
    WHERE LOGIN.COD_ROLE = ROLE.COD_ROLE
    GROUP BY NAM_ROLE;
END;
//

DELIMITER //
CREATE PROCEDURE SP_SEL_PERMISSIONS(IN _COD_ROLE BIGINT
)BEGIN	
	SELECT COD_PERMISSION, COD_ROLE, PERMISSIONS.COD_MODULE, NAM_MODULE, PERMISSIONS.COD_TABLE, NAM_TABLE, INS, DEL, UPD, QUE
	FROM MODULES, PERMISSIONS, TABLES
	WHERE PERMISSIONS.COD_MODULE = MODULES.COD_MODULE
    AND TABLES.COD_TABLE = PERMISSIONS.COD_TABLE
	AND COD_ROLE = _COD_ROLE;
END
//

DELIMITER //
CREATE PROCEDURE SP_DEL_ROLE(IN _COD_ROLE BIGINT
)BEGIN	
	UPDATE LOGIN
    SET COD_ROLE = 2
    WHERE COD_ROLE = _COD_ROLE;

	DELETE FROM ROLE
    WHERE  COD_ROLE = _COD_ROLE;
END
//

DELIMITER //
CREATE PROCEDURE SP_INS_PERMISSIONS(IN _COD_ROLE BIGINT,
									_COD_MODULE BIGINT,
                                    _COD_TABLE BIGINT,
									_QUE BOOLEAN,
									_INS BOOLEAN,
									_UPD BOOLEAN,
									_DEL BOOLEAN
)BEGIN	
	IF EXISTS (SELECT * FROM PERMISSIONS WHERE COD_ROLE = _COD_ROLE AND COD_MODULE = _COD_MODULE AND COD_TABLE = _COD_TABLE) THEN
		SIGNAL SQLSTATE  '45000'
		SET MESSAGE_TEXT= 'El rol ya cuenta con permisos para el módulo seleccionado.';
    ELSE
		INSERT INTO PERMISSIONS(COD_ROLE, COD_MODULE, COD_TABLE, INS, DEL, UPD, QUE)
        VALUES(_COD_ROLE, _COD_MODULE, _COD_TABLE, _INS, _DEL, _UPD, _QUE);
    END IF;
END;
//

DELIMITER //
CREATE PROCEDURE SP_GRAPHICS_TYPE_PAY(
)BEGIN
	SELECT NAM_TYPE_PAY,  COUNT(SALES_INVOICE.COD_TYP_PAY) NUM
	FROM TYPE_TO_PAY, SALES_INVOICE
	WHERE TYPE_TO_PAY.COD_TYP_PAY = SALES_INVOICE.COD_TYP_PAY
	GROUP BY NAM_TYPE_PAY;
END;
//

DELIMITER //
CREATE PROCEDURE SP_GRAFICA_CATEGORY(
)BEGIN
	SELECT NAM_CATEGORY, SUM(CANT_PRODUCTS) TOTAL FROM INVENTORY, CATEGORY, SALE_DETAIL
	WHERE INVENTORY.COD_CATEGORY = CATEGORY.COD_CATEGORY
	AND SALE_DETAIL.COD_PRODUCT = INVENTORY.COD_PRODUCT
	GROUP BY NAM_CATEGORY;
END;
//

DELIMITER //
CREATE PROCEDURE SP_PURCHASE_WEEK(
)BEGIN 
	SELECT SUM(TOT_PURCHASE) TOTAL_COMPRAS FROM PURCHASE_INVOICE
    WHERE DAT_INVOICE BETWEEN DATE_SUB(CURDATE(), INTERVAL 7 DAY) AND CURDATE();
END;
//

DELIMITER //
CREATE PROCEDURE SP_PURCHASE_MONTH(
)BEGIN
	SELECT SUM(TOT_PURCHASE) TOTAL_COMPRAS FROM PURCHASE_INVOICE
    WHERE DAT_INVOICE BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE();
END;
//

DELIMITER //
CREATE PROCEDURE SP_SALES_EMPLOYEE(
)BEGIN
	SELECT CONCAT(FIRST_NAME, ' ', LAST_NAME) NOMBRE, SUM(TOT_SALE) TOTAL FROM USER, SALES_INVOICE
	WHERE USER.COD_USER = SALES_INVOICE.COD_USER
	GROUP BY NOMBRE;
END;
//

DELIMITER //
CREATE PROCEDURE SP_PURCHASE_SUPPLIER(
)BEGIN
	SELECT NAM_SUPPLIER SUPPLIER, SUM(TOT_PURCHASE) TOTAL_COMPRA FROM SUPPLIER, PURCHASE_INVOICE
	WHERE SUPPLIER.COD_SUPPLIER = PURCHASE_INVOICE.COD_ORDER
	GROUP BY NAM_SUPPLIER;
END;
//

DELIMITER //
CREATE PROCEDURE SP_DEL_PERMISSION(IN _COD_PERMISSION BIGINT
)BEGIN
	DELETE FROM PERMISSIONS
    WHERE COD_PERMISSION = _COD_PERMISSION; 
END;

CREATE PROCEDURE SP_TOT_DAY(
)BEGIN
	SELECT DAT_INVOICE, SUM(TOT_SALE) TOT_DAY FROM SALES_INVOICE
    WHERE DAT_INVOICE BETWEEN DATE_SUB(CURDATE(), INTERVAL 7 DAY) AND CURDATE()
	GROUP BY DAT_INVOICE;
END;
//

DELIMITER //
CREATE PROCEDURE SP_PURCHASE_TO_DAY(
)BEGIN
    SELECT DAT_INVOICE, SUM(TOT_PURCHASE) TOT_PURS_DAY FROM PURCHASE_INVOICE
    WHERE DAT_INVOICE BETWEEN DATE_SUB(CURDATE(), INTERVAL 7 DAY) AND CURDATE()
    GROUP BY DAT_INVOICE;
END;
//

DELIMITER //
CREATE PROCEDURE SP_ORDERS_PRO(
)BEGIN
	SELECT COUNT(COD_STATUS) TOT_ORDERS FROM ORDERS
    WHERE COD_STATUS = 5;
END;
//

DELIMITER //
CREATE PROCEDURE SP_SALE_DAY(
)BEGIN
    SELECT SUM(TOT_SALE) SALES_DAY FROM SALES_INVOICE
    WHERE DAT_INVOICE = CURDATE();
END;
//

DELIMITER //
CREATE PROCEDURE SP_SALE_CANT_CLIENT(
)BEGIN
	SELECT CONCAT(FIRST_NAME, ' ', LAST_NAME) NAM_CLIENT, COUNT(TOT_SALE) CANT FROM CLIENT, SALES_INVOICE
	WHERE CLIENT.COD_CLIENT = SALES_INVOICE.COD_CLIENT
    AND SALES_INVOICE.COD_CLIENT != 1
	GROUP BY NAM_CLIENT
    LIMIT 6;
END;
//

DELIMITER //
CREATE PROCEDURE SP_DECREASE(
)BEGIN
	SELECT NAM_PRODUCT, SUM(CANT_PRODUCTS) TOT_PRODUCTS FROM INVENTORY, DECREASE
	WHERE INVENTORY.COD_PRODUCT = DECREASE.COD_PRODUCT
	GROUP BY NAM_PRODUCT;
    END;
//

DELIMITER // 
CREATE PROCEDURE SP_SEL_CORRELATIVE(
)BEGIN
	SELECT MAX(COD_INVOICE) CORRELATIVO FROM SALES_INVOICE;
END;
//

DELIMITER // 
CREATE PROCEDURE SP_SEL_FINDCLIENT(IN _RTN CHAR(14)
)BEGIN
	SELECT * FROM CLIENT WHERE RTN = _RTN;
END;
//

-- INSERT EN LA TABLA `CATEGORIAS`
DELIMITER //
CREATE  PROCEDURE SP_INS_CATEGORY(
							IN 	_NAM_CATEGORY VARCHAR(255),
								_DESCRIPTION VARCHAR(255),
                                _COD_STATUS BIGINT
)
BEGIN
	-- INSERT EN LA BD--
    IF EXISTS (SELECT NAM_CATEGORY FROM CATEGORY WHERE NAM_CATEGORY = _NAM_CATEGORY) THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'La categoria ya existe';
            ELSE
	INSERT INTO CATEGORY (NAM_CATEGORY, DESCRIPTION, COD_STATUS)
	VALUES (_NAM_CATEGORY, _DESCRIPTION, _COD_STATUS);
			END IF;
END
//

 -- UPDATE EN LA TABLA DE `CATEGORIAS`
 DELIMITER //
 CREATE PROCEDURE SP_UPD_CATEGORY(
						IN 	_COD_CATEGORY BIGINT,
							_DESCRIPTION VARCHAR(255),
                            _COD_STATUS BIGINT
)
BEGIN
	-- INSERT EN LA BD--
	UPDATE CATEGORY 
	SET DESCRIPTION = _DESCRIPTION,
    COD_STATUS = _COD_STATUS
    WHERE COD_CATEGORY = _COD_CATEGORY;
END
//

DELIMITER //
CREATE PROCEDURE SP_SEL_CATEGORY(
						IN _COD_CATEGORY BIGINT
)
BEGIN
	IF  _COD_CATEGORY = 0 THEN
			SELECT COD_CATEGORY, NAM_CATEGORY, DESCRIPTION, NAM_STATUS, CATEGORY.COD_STATUS FROM CATEGORY, STATUS
            WHERE CATEGORY.COD_STATUS = STATUS.COD_STATUS;
		ELSE 
			SELECT COD_CATEGORY, NAM_CATEGORY, DESCRIPTION, NAM_STATUS, CATEGORY.COD_STATUS FROM CATEGORY, STATUS
            WHERE CATEGORY.COD_STATUS = STATUS.COD_STATUS 
            AND COD_CATEGORY = _COD_CATEGORY;
	END IF;
END
//

DELIMITER //
CREATE PROCEDURE SP_DEL_CATEGORY(IN _COD_CATEGORY BIGINT
)BEGIN
	DELETE FROM CATEGORY
    WHERE COD_CATEGORY = _COD_CATEGORY;
END;
//

DELIMITER //
CREATE PROCEDURE SP_SEL_INVENTORY_TRANSACTIONS(
						IN _COD_TRANSACTIONS BIGINT
)
BEGIN
	IF  _COD_TRANSACTIONS = 0 THEN
			SELECT COD_TRANSACTIONS, INVENTORY_TRANSACTIONS.COD_PRODUCT, NAM_PRODUCT, TYP_TRANSACTION, CANT, NUM_LOT, DAT_TRANSACTION
            FROM INVENTORY_TRANSACTIONS, INVENTORY
            WHERE INVENTORY_TRANSACTIONS.COD_PRODUCT = INVENTORY.COD_PRODUCT;
		ELSE 
			SELECT COD_TRANSACTIONS, INVENTORY_TRANSACTIONS.COD_PRODUCT, NAM_PRODUCT, TYP_TRANSACTION, CANT, NUM_LOT, DAT_TRANSACTION
            FROM INVENTORY_TRANSACTIONS, INVENTORY
            WHERE INVENTORY_TRANSACTIONS.COD_PRODUCT = INVENTORY.COD_PRODUCT
            AND COD_TRANSACTIONS = _COD_TRANSACTIONS;
	END IF;
END
//

DELIMITER //
CREATE PROCEDURE SP_SEL_BITACORA(
	
)
BEGIN
	SELECT CONCAT(FIRST_NAME, ' ', LAST_NAME) USER, ACTION, OBJECT, FIELD, RECORD, BEFORE_THE_CHANGE, AFTER_THE_CHANGE, DATE
	FROM MS_BITACORA, USER
	WHERE USER.COD_USER = MS_BITACORA.COD_USER;
END;
//

DELIMITER //
CREATE PROCEDURE SP_SEL_MODULES(
)BEGIN	
	SELECT * FROM MODULES;
END
//

DELIMITER //
CREATE PROCEDURE SP_SEL_TABLES(IN _COD_MODULE BIGINT
)BEGIN	
	SELECT * FROM TABLES
    WHERE COD_MODULE = _COD_MODULE;
END
//

DELIMITER //
CREATE PROCEDURE SP_PASS_EXPIRE(IN
							_COD_USER BIGINT
)BEGIN
	SELECT DAT_EXP FROM LOGIN WHERE COD_USER = _COD_USER;
END
//

DELIMITER //
CREATE PROCEDURE SP_SEL_TYP_PRODUCT_ENTRIES(
)BEGIN
	SELECT * FROM TYP_PRODUCT_ENTRIES;
END;
//

DELIMITER //
CREATE PROCEDURE SP_SEL_TYP_PRODUCT_OUTPUT(
)BEGIN
	SELECT * FROM TYP_PRODUCT_OUTPUT;
END;
//

DELIMITER //
CREATE PROCEDURE SP_SEL_LOTES(IN _COD_PRODUCT VARCHAR(255))
BEGIN
	SELECT NUM_LOT FROM INVENTORY_DETAIL
    WHERE COD_PRODUCT = _COD_PRODUCT
    AND CANT_PRODUCTS > 0;
END;
//

DELIMITER //
CREATE PROCEDURE SP_SEL_COMPANY_DATA()
BEGIN
	SELECT COMPANY_NAM, COMPANY_ADDRESS, COMPANY_EMAIL, COMPANY_RTN, COMPANY_PHONE, COMPANY_LOCATION, COMPANY_FACEBOOK, COMPANY_INSTAGRAM, 
    COMPANY_WHATSAPP, CONCAT(FIRST_NAME, ' ', LAST_NAME) USER_LAST_UPDATE
    FROM COMPANY_DATA, USER
    WHERE COMPANY_DATA.COD_USER = USER.COD_USER;
END;
//

DELIMITER //
CREATE PROCEDURE SP_UPD_COMPANY_DATA(IN _COMPANY_NAM VARCHAR(255),
										_COMPANY_ADDRESS TEXT,
										_COMPANY_EMAIL VARCHAR(255),
                                        _COMPANY_RTN VARCHAR(255),
                                        _COMPANY_PHONE INT,
                                        _COMPANY_LOCATION VARCHAR(255),
                                        _COMPANY_FACEBOOK VARCHAR(255),
                                        _COMPANY_INSTAGRAM VARCHAR(255),
                                        _COMPANY_WHATSAPP VARCHAR(255),
                                        _COD_USER BIGINT
)BEGIN
	UPDATE COMPANY_DATA
    SET COMPANY_NAM = _COMPANY_NAM,
    COMPANY_ADDRESS = _COMPANY_ADDRESS,
    COMPANY_EMAIL = _COMPANY_EMAIL,
    COMPANY_RTN = _COMPANY_RTN,
    COMPANY_PHONE = _COMPANY_PHONE,
    COMPANY_LOCATION = _COMPANY_LOCATION,
    COMPANY_FACEBOOK = _COMPANY_FACEBOOK,
    COMPANY_INSTAGRAM = _COMPANY_INSTAGRAM,
    COMPANY_WHATSAPP = _COMPANY_WHATSAPP,
    COD_USER = _COD_USER
    WHERE COD_COMPANY = 1;
END;
//

DELIMITER //
CREATE PROCEDURE SP_SEL_SYSTEM_SETTINGS()
BEGIN
	SELECT NUM_DAYS_PASSWORD_EXPIRED, NUM_ATTEMPS_LOGIN, CONCAT(FIRST_NAME, ' ', LAST_NAME) USER_LAST_UPDATE
    FROM SYSTEM_SETTINGS, USER
    WHERE SYSTEM_SETTINGS.COD_USER = USER.COD_USER
    AND COD_SETTING = 1;
END;
//

DELIMITER //
CREATE PROCEDURE SP_UPD_SYSTEM_SETTINGS(IN _NUM_DAYS_PASSWORD_EXPIRED INT,
													_NUM_ATTEMPS_LOGIN INT,
													_COD_USER BIGINT
)BEGIN
	UPDATE SYSTEM_SETTINGS
    SET NUM_DAYS_PASSWORD_EXPIRED = _NUM_DAYS_PASSWORD_EXPIRED,
    NUM_ATTEMPS_LOGIN = _NUM_ATTEMPS_LOGIN,
    COD_USER = _COD_USER
    WHERE COD_SETTING = 1;
END;
//

DELIMITER //
CREATE PROCEDURE SP_UPD_NUM_ATTEMPS_LOGIN(IN _LOGGED VARCHAR(255), _COD_USER BIGINT
)BEGIN
	IF _LOGGED = 'true' THEN
		UPDATE LOGIN
        SET NUM_ATTEMPS = 0
        WHERE COD_USER = _COD_USER;
    ELSE
		UPDATE LOGIN
        SET NUM_ATTEMPS = NUM_ATTEMPS + 1
        WHERE COD_USER = _COD_USER;
    END IF;
END;
//

DELIMITER //
CREATE PROCEDURE SP_SEL_TAXES(
					IN _COD_TAX BIGINT
)BEGIN
  IF _COD_TAX = 0 THEN
   SELECT COD_TAX, TAX, TAXES.COD_STATUS, NAM_STATUS FROM TAXES, STATUS
   WHERE TAXES.COD_STATUS = STATUS.COD_STATUS;
  ELSE
   SELECT COD_TAX, TAX, TAXES.COD_STATUS, NAM_STATUS FROM TAXES, STATUS
   WHERE TAXES.COD_STATUS = STATUS.COD_STATUS
   AND COD_TAX = _COD_TAX;
  END IF;
 END
 //

DELIMITER //
CREATE PROCEDURE SP_DEL_TAXES (
						IN _COD_TAX  BIGINT
)BEGIN
       DELETE FROM TAXES
       WHERE _COD_TAX= COD_TAX;
END;
//

DELIMITER //
CREATE PROCEDURE SP_INS_TAXES(
                      IN _TAX DECIMAL(10,2),
                      _COD_STATUS BIGINT
)BEGIN
  -- INSERT TAXES
  IF EXISTS(SELECT COD_TAX FROM TAXES WHERE TAX = _TAX) THEN
			SIGNAL SQLSTATE  '45000'
			SET MESSAGE_TEXT= 'El valor del impuesto ya se encuentra registrado';
		ELSE
            INSERT INTO TAXES(TAX, COD_STATUS)
            VALUES(_TAX, _COD_STATUS);
	END IF;
 END;
 //

 DELIMITER //
CREATE PROCEDURE SP_SEL_TYPE_ENTRIES(
						IN _COD_TYPE  BIGINT
)
BEGIN
		IF _COD_TYPE = 0 THEN
		SELECT * FROM TYP_PRODUCT_ENTRIES;
		ELSE
		SELECT * FROM TYP_PRODUCT_ENTRIES
        WHERE COD_TYPE = _COD_TYPE;
    END IF;
    END
//

DELIMITER //
CREATE PROCEDURE SP_INS_TYPE_ENTRIES(
						IN 	_NAM_TYPE VARCHAR(15),
							_DES_TYPE VARCHAR(255)
)
BEGIN
IF EXISTS (SELECT NAM_TYPE FROM TYP_PRODUCT_ENTRIES WHERE _NAM_TYPE=NAM_TYPE) THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El tipo de entrada ya existe';
    ELSE
    INSERT INTO TYP_PRODUCT_ENTRIES(NAM_TYPE, DES_TYPE)
	VALUES (_NAM_TYPE, _DES_TYPE);
    END IF;
END
//

DELIMITER //
CREATE PROCEDURE SP_DEL_TYPE_ENTRIES(
						IN _COD_TYPE  BIGINT
)
BEGIN
       DELETE FROM TYP_PRODUCT_ENTRIES
       WHERE COD_TYPE = _COD_TYPE;
END
//

DELIMITER //
CREATE PROCEDURE SP_UPD_TYP_ENTRIES(
							IN	_COD_TYPE BIGINT,
								_NAM_TYPE VARCHAR(15),
                                _DES_TYPE VARCHAR(255)
)
BEGIN
		IF EXISTS (SELECT NAM_TYPE FROM TYP_PRODUCT_ENTRIES WHERE _NAM_TYPE=NAM_TYPE) THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El tipo de entrada ya existe';
		ELSE
        UPDATE TYP_PRODUCT_ENTRIES
		SET NAM_TYPE = _NAM_TYPE,
        DES_TYPE = _DES_TYPE
		WHERE COD_TYPE=_COD_TYPE;
		END IF;
END;
//

DELIMITER //
CREATE PROCEDURE SP_SEL_TYPE_OUTPUT(
						IN _COD_TYPE  BIGINT
)
BEGIN
		IF _COD_TYPE = 0 THEN
		SELECT * FROM TYP_PRODUCT_OUTPUT;
		ELSE
		SELECT * FROM TYP_PRODUCT_OUTPUT
        WHERE COD_TYPE = _COD_TYPE;
    END IF;
    END
//

DELIMITER //
CREATE PROCEDURE SP_INS_TYPE_OUTPUT(
						IN 	_NAM_TYPE VARCHAR(15),
							_DES_TYPE VARCHAR(255)
)
BEGIN
IF EXISTS (SELECT NAM_TYPE FROM TYP_PRODUCT_OUTPUT WHERE _NAM_TYPE = NAM_TYPE) THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El tipo de salida ya existe';
    ELSE
    INSERT INTO TYP_PRODUCT_OUTPUT(NAM_TYPE, DES_TYPE)
	VALUES (_NAM_TYPE, _DES_TYPE);
    END IF;
END
//

DELIMITER //
CREATE PROCEDURE SP_DEL_TYPE_OUTPUT(
						IN _COD_TYPE  BIGINT
)
BEGIN
       DELETE FROM TYP_PRODUCT_OUTPUT
       WHERE COD_TYPE = _COD_TYPE;
END
//

DELIMITER //
CREATE PROCEDURE SP_UPD_TYP_OUTPUT(
							IN	_COD_TYPE BIGINT,
								_NAM_TYPE VARCHAR(15),
                                _DES_TYPE VARCHAR(255)
)
BEGIN
		IF EXISTS (SELECT NAM_TYPE FROM TYP_PRODUCT_OUTPUT WHERE _NAM_TYPE=NAM_TYPE) THEN
		SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'El tipo de salida ya existe';
		ELSE
        UPDATE TYP_PRODUCT_OUTPUT
		SET NAM_TYPE = _NAM_TYPE,
        DES_TYPE = _DES_TYPE
		WHERE COD_TYPE=_COD_TYPE;
		END IF;
END
//
 -- UPDATE TAXES
 DELIMITER //
 CREATE PROCEDURE SP_UPD_TAXES(
					IN _COD_TAX BIGINT,
                       _COD_STATUS BIGINT
 ) BEGIN
   -- UPDATE EN LA BD
      UPDATE TAXES
      SET COD_STATUS = _COD_STATUS
      WHERE COD_TAX = _COD_TAX;
   END
   //
