/* CABOTAJE SUPPLER STORAGE PROCEDURES */

-- SP PARA VERIFICAR LOGUEO
DELIMITER //
CREATE PROCEDURE SP_LOGIN(IN
							_USER_EMAIL VARCHAR(255)
)BEGIN

	SET @USER = (SELECT COUNT(COD_USER) FROM LOGIN WHERE USER_EMAIL = _USER_EMAIL);
	
    IF @USER >= 1 THEN
		SELECT COD_ROLE, FIRST_NAME, LAST_NAME, USER_PASSWORD FROM USER, LOGIN
        WHERE USER.COD_USER = LOGIN.COD_USER
        AND USER_EMAIL = _USER_EMAIL;
	ELSE
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El email o contraseña son incorrectos.';
    END IF;
END;
//

/*###### MODULO DE VENTAS #####*/

-- INSERT EN LA TABLA `FACTURAS DE VENTA`
DELIMITER //
CREATE PROCEDURE SP_INS_SALE_INVOICE(IN 
						_COD_CLIENT BIGINT,
                        _COD_USER BIGINT,
                        _SUBTOTAL DECIMAL(10,2),
                        _TOT_DISCOUNT DECIMAL(10,2),
                        _TOT_ISV DECIMAL(10,2),
                        _TOT_SALE DECIMAL(10,2),
                        _TYP_TO_SALE ENUM('Crédito', 'Contado'),
                        _COD_TYP_PAY BIGINT
)BEGIN
	-- INSERTAR EN LA TABLA DE FACTURA
    INSERT INTO SALES_INVOICE(COD_CLIENT, COD_USER, SUBTOTAL, TOT_DISCOUNT, TOT_ISV, TOT_SALE, TYP_TO_SALE, COD_TYP_PAY, DAT_INVOICE)
    VALUES(_COD_CLIENT, _COD_USER, _SUBTOTAL, _TOT_DISCOUNT, _TOT_ISV, _TOT_SALE, _TYP_TO_SALE, _COD_TYP_PAY, CURDATE());
    
    -- OBTENEMOS LA ULTIMA FACTURA
    SET @COD = (SELECT MAX(COD_INVOICE) FROM SALES_INVOICE);
    
    -- INSERTAR DESCUENTO TOTAL
    INSERT INTO SALES_DISCOUNTS(COD_INVOICE, DESCRIPTION, AMOUNT)
    VALUES(@COD, 'Descuento sobre ventas', _TOT_DISCOUNT);
END;
//

-- CONSULTA EN LA TABLA DE 'FACTURAS DE VENTA'
DELIMITER //
CREATE PROCEDURE SP_SEL_SALES_INVOICE(
									IN _COD_INVOICE BIGINT
)BEGIN
	IF _COD_INVOICE = 0 THEN
		SELECT COD_INVOICE, CONCAT(CLIENT.FIRST_NAME, ' ', CLIENT.LAST_NAME) CLIENT, 
		CONCAT(USER.FIRST_NAME, ' ', USER.LAST_NAME) USER_NAME,
		SUBTOTAL, TOT_DISCOUNT, TOT_ISV, TYP_TO_SALE, NAM_TYPE_PAY, DAT_INVOICE
		FROM CLIENT, USER, SALES_INVOICE, TYPE_TO_PAY
		WHERE CLIENT.COD_CLIENT = SALES_INVOICE.COD_CLIENT
		AND USER.COD_USER = SALES_INVOICE.COD_USER
		AND TYPE_TO_PAY.COD_TYP_PAY = SALES_INVOICE.COD_TYP_PAY;
	ELSE
		SELECT COD_INVOICE, CONCAT(CLIENT.FIRST_NAME, ' ', CLIENT.LAST_NAME) CLIENT, 
		CONCAT(USER.FIRST_NAME, ' ', USER.LAST_NAME) USER_NAME,
		SUBTOTAL, TOT_DISCOUNT, TOT_ISV, TYP_TO_SALE, NAM_TYPE_PAY, DAT_INVOICE
		FROM CLIENT, USER, SALES_INVOICE, TYPE_TO_PAY
		WHERE CLIENT.COD_CLIENT = SALES_INVOICE.COD_CLIENT
		AND USER.COD_USER = SALES_INVOICE.COD_USER
		AND TYPE_TO_PAY.COD_TYP_PAY = SALES_INVOICE.COD_TYP_PAY
        AND COD_INVOICE = _COD_INVOICE;
	END IF;
END
//

-- INSERT EN LA TABLA `DETALLE DE VENTA`
DELIMITER //
CREATE PROCEDURE SP_INS_SALE_DETAIL(IN 
                        _COD_PRODUCT BIGINT,
                        _PRICE DECIMAL(10,2),
                        _CANT_PRODUCTS DECIMAL(5,2),
                        _DISCOUNT DECIMAL(10,2),
                        _TOTAL DECIMAL(10,2)
)BEGIN
    -- OBTENEMOS LA ULTIMA FACTURA
    SET @COD = (SELECT MAX(COD_INVOICE) FROM SALES_INVOICE);
    -- DETERMINAMOS LA CANTIDAD TOTAL DE PRODUCTOS EN INVENTARIO
	SET @CANT_PRODUCTS = (SELECT SUM(CANT_PRODUCTS) FROM INVENTORY_DETAIL WHERE COD_PRODUCT = _COD_PRODUCT);
    -- INICIALIZAMOS EL ITERADOR
    SET @ITERADOR = _CANT_PRODUCTS;
    
    IF @CANT_PRODUCTS >= _CANT_PRODUCTS THEN
    
		-- INSERTAR DETALLE DE FACTURA
		INSERT INTO SALE_DETAIL(COD_INVOICE, COD_PRODUCT, PRICE, CANT_PRODUCTS, DISCOUNT, TOTAL)
		VALUES(@COD, _COD_PRODUCT, _PRICE, _CANT_PRODUCTS, _DISCOUNT, _TOTAL);
    
		-- ACTUALIZAR DETALLE DE INVENTARIO
		WHILE @ITERADOR > 0 DO
			-- DETERMINAMOS EL NUMERO DE LOTE 
            SET @NUM_LOTE = (SELECT NUM_LOT FROM INVENTORY_DETAIL WHERE COD_PRODUCT = _COD_PRODUCT AND CANT_PRODUCTS > 0 ORDER BY DAT_PURCHASE LIMIT 1);
			
            -- ACTUALIZAMOS EL DETALLE
            UPDATE INVENTORY_DETAIL
			SET CANT_PRODUCTS = CANT_PRODUCTS - 1
			WHERE COD_PRODUCT = _COD_PRODUCT
			AND NUM_LOT = @NUM_LOTE;
            
            -- INSERTAR MOVIMIENTO O ACTUALIZAR MOVIMIENTO
			IF EXISTS (SELECT NUM_LOT FROM INVENTORY_TRANSACTIONS WHERE NUM_LOT = @NUM_LOTE AND DAT_TRANSACTION = CURDATE()) THEN
				UPDATE INVENTORY_TRANSACTIONS
                SET CANT = CANT + 1
                WHERE COD_PRODUCT = _COD_PRODUCT
                AND NUM_LOT = @NUM_LOTE;
            ELSE
				INSERT INTO INVENTORY_TRANSACTIONS(COD_PRODUCT, TYP_TRANSACTION, CANT, NUM_LOT, DAT_TRANSACTION)
				VALUES(_COD_PRODUCT, 'Salida', 1, @NUM_LOTE, CURDATE());
			END IF;
            
            SET @ITERADOR = @ITERADOR - 1;
        END WHILE;
    ELSE
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'No hay cantidad suficiente de productos';
	END IF;
    
    -- ACTUALIZAR CANTIDAD DE PRODUCTOS TOTALES EN INVENTARIO
    UPDATE INVENTORY
    SET CANT_TOTAL = CANT_TOTAL - _CANT_PRODUCTS
    WHERE COD_PRODUCT = _COD_PRODUCT;
END;
//

-- CONSULTA A LA TABLA 'SALE DETAIL'
DELIMITER //
CREATE PROCEDURE SP_SEL_SALE_DETAIL(
									IN _COD_INVOICE BIGINT
)BEGIN
	SELECT COD_DETAIL, COD_INVOICE, INVENTORY.COD_PRODUCT, NAM_PRODUCT, PRICE, CANT_PRODUCTS, DISCOUNT, TOTAL
    FROM SALE_DETAIL, INVENTORY
    WHERE INVENTORY.COD_PRODUCT = SALE_DETAIL.COD_PRODUCT
    AND COD_INVOICE = _COD_INVOICE;
END;
//

/*###### MODULO DE COMPRAS Y PEDIDOS #####*/

/*###### MODULO DE COMPRAS Y PEDIDOS #####*/

-- INSERT EN LA TABLA `FACTURA DE COMPRA`
DELIMITER //
CREATE PROCEDURE SP_INS_PURCHASE_INVOICE(
                                     IN _SUBTOTAL DECIMAL(10,2),
                                     _TOT_DISCOUNT DECIMAL(10,2),
                                     _TOT_ISV DECIMAL(10,2),
                                     _TOT_PURCHASE DECIMAL(10,2),
                                     _TYP_TO_PURCHASE ENUM('Crédito', 'Contado'),
                                     _COD_TYP_PAY BIGINT,
                                     _DAT_INVOICE DATE,
                                     _COD_ORDER BIGINT,
                                     _COD_USER BIGINT
)BEGIN
	IF EXISTS (SELECT COD_ORDER FROM ORDERS WHERE COD_ORDER = _COD_ORDER) OR _COD_ORDER = 0 THEN
		IF _COD_ORDER = 0 THEN
			INSERT INTO PURCHASE_INVOICE(SUBTOTAL,TOT_DISCOUNT,TOT_ISV,TOT_PURCHASE,TYP_TO_PURCHASE,COD_TYP_PAY,DAT_INVOICE,COD_ORDER,COD_USER)
			VALUES( _SUBTOTAL, _TOT_DISCOUNT,_TOT_ISV,_TOT_PURCHASE,_TYP_TO_PURCHASE,_COD_TYP_PAY,_DAT_INVOICE,NULL,_COD_USER);
		ELSE
			 INSERT INTO PURCHASE_INVOICE(SUBTOTAL,TOT_DISCOUNT,TOT_ISV,TOT_PURCHASE,TYP_TO_PURCHASE,COD_TYP_PAY,DAT_INVOICE,COD_ORDER,COD_USER)
			 VALUES( _SUBTOTAL, _TOT_DISCOUNT,_TOT_ISV,_TOT_PURCHASE,_TYP_TO_PURCHASE,_COD_TYP_PAY,_DAT_INVOICE,_COD_ORDER,_COD_USER);
        END IF;
	ELSE
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'La orden no existe.';
    END IF;
 END;
 //
 
 -- UPDATE EN LA TABLA `FACTURA DE COMPRA`
  DELIMITER //
 CREATE PROCEDURE SP_UPD_PURCHASE_INVOICE (
                                      IN _COD_INVOICE BIGINT,
                                      _SUBTOTAL DECIMAL(10,2),
                                     _TOT_DISCOUNT DECIMAL(10,2),
                                     _TOT_ISV DECIMAL(10,2),
                                     _TOT_PURCHASE DECIMAL(10,2),
                                     _TYP_TO_PURCHASE ENUM('CREDITO', 'CONTADO'),
                                     _COD_TYP_PAY BIGINT, 
                                     _DAT_INVOICE DATE,
                                     _COD_ORDER BIGINT,
                                     _COD_USER BIGINT
                                     
)BEGIN 
-- ACTUALIZAR DATOS 
	UPDATE PURCHASE_INVOICE  
	SET SUBTOTAL=_SUBTOTAL,TOT_DISCOUNT = _TOT_DISCOUNT,TOT_ISV = _TOT_ISV,TOT_PURCHASE = _TOT_PURCHASE,TYP_TO_PURCHASE = _TYP_TO_PURCHASE,COD_TYP_PAY = _COD_TYP_PAY,DAT_INVOICE = _DAT_INVOICE,COD_ORDER = _COD_ORDER,COD_USER = _COD_USER
	WHERE COD_INVOICE = _COD_INVOICE;
END;
//

-- INSERT EN LA TABLA `DETALLE DE COMPRA`
DELIMITER //
CREATE PROCEDURE SP_INS_PURCHASE_DETAIL(
								IN _COD_PRODUCT BIGINT,
                                _PRICE DECIMAL(10,2),
                                _CANT_PRODUCTS INT,
                                _DISCOUNT DECIMAL(5,2),
                                _TOTAL DECIMAL(10,2) 
)BEGIN
	-- OBTENEMOS LA ULTIMA FACTURA
	SET @ID = (SELECT MAX(COD_INVOICE) FROM PURCHASE_INVOICE);

	INSERT INTO PURCHASE_DETAIL(COD_INVOICE, COD_PRODUCT, PRICE,CANT_PRODUCTS, DISCOUNT,TOTAL)
	VALUES(@ID, _COD_PRODUCT, _PRICE, _CANT_PRODUCTS, _DISCOUNT,_TOTAL);
END;
//

-- UPDATE EN LA TABLA DETALLE DE COMPRA
DELIMITER //
CREATE PROCEDURE SP_UPD_PURCHASE_DETAIL(
								IN _COD_DETAIL BIGINT,
                                _COD_PRODUCT BIGINT,
                                _PRICE DECIMAL(10,2),
                                _CANT_PRODUCTS INT,
                                _DISCOUNT DECIMAL(5,2),
                                _TOTAL DECIMAL(10,2)
)BEGIN
	-- ACTUALIZAR DATOS
	UPDATE PURCHASE_DETAIL
	SET COD_PRODUCT = _COD_PRODUCT, PRICE = _PRICE,CANT_PRODUCTS = _CANT_PRODUCTS,DISCOUNT = _DISCOUNT,TOTAL=_TOTAL
	WHERE COD_DETAIL = _COD_DETAIL;
END;
//

#SP DE SELECT Y DELETE TABLA FACTURA COMPRA
DELIMITER //
CREATE PROCEDURE SP_SEL_PURCHASE_INVOICE(
										  IN _COD_INVOICE BIGINT
)BEGIN
IF _COD_INVOICE = 0 THEN
  SELECT COD_INVOICE,SUBTOTAL,TOT_DISCOUNT,TOT_ISV,TOT_PURCHASE,TYP_TO_PURCHASE,NAM_TYPE_PAY,DAT_INVOICE,COD_ORDER,
    CONCAT(USER.FIRST_NAME, ' ' ,USER.LAST_NAME)USER_NAME
    FROM PURCHASE_INVOICE,TYPE_TO_PAY,USER
    WHERE PURCHASE_INVOICE.COD_TYP_PAY = TYPE_TO_PAY.COD_TYP_PAY
    AND PURCHASE_INVOICE.COD_USER = USER.COD_USER;
ELSE
    SELECT * FROM PURCHASE_INVOICE
    WHERE COD_INVOICE = _COD_INVOICE;
END IF;
END;    										
//

DELIMITER //
CREATE PROCEDURE SP_DEL_PURCHASE_INVOICE(
										  IN _COD_INVOICE BIGINT
)BEGIN
DELETE FROM PURCHASE_INVOICE
WHERE COD_INVOICE = _COD_INVOICE;
END;    										
//

#SP DE SELECT Y DELETE TABLA COMPRA DETALLES
DELIMITER //
CREATE PROCEDURE SP_SEL_PURCHASE_DETAIL(
										  IN _COD_DETAIL BIGINT
)BEGIN
IF _COD_DETAIL = 0 THEN
   SELECT COD_DETAIL , COD_INVOICE, NAM_PRODUCT,PRICE , CANT_PRODUCTS , DISCOUNT , TOTAL 
     FROM PURCHASE_DETAIL ,INVENTORY 
	WHERE INVENTORY.COD_PRODUCT = PURCHASE_DETAIL.COD_PRODUCT;
ELSE
    SELECT * FROM PURCHASE_DETAIL
    WHERE COD_DETAIL = _COD_DETAIL;
END IF;
END;    										
//
DELIMITER //
CREATE PROCEDURE SP_DEL_PURCHASE_DETAIL(
										  IN _COD_DETAIL BIGINT
)BEGIN
	DELETE FROM PURCHASE_DETAIL
	WHERE COD_DETAIL = _COD_DETAIL;
END;    										
//

-- INSERT EN LA TABLA DE `PEDIDO`
DELIMITER //
CREATE PROCEDURE SP_INS_ORDER(
								IN 
									_COD_SUPPLIER BIGINT,
                                    _DAT_REQUIRED DATE,
                                    _COD_USER BIGINT
)BEGIN
-- INSERTAR EN LA BASE DE DATOS -- 
	INSERT INTO ORDERS (COD_SUPPLIER, DAT_ORDER, DAT_REQUIRED, COD_USER, COD_STATUS)
	VALUES(_COD_SUPPLIER, CURDATE(), _DAT_REQUIRED, _COD_USER, 5);
END;
//

-- UPDATE EN LA TABLA DE `PEDIDO`
DELIMITER //
CREATE PROCEDURE SP_UPD_ORDER(
						IN
							_COD_ORDER BIGINT,
                            _COD_SUPPLIER BIGINT,
                            _DAT_REQUIRED DATE,
                            _COD_USER BIGINT,
							_COD_STATUS BIGINT
)BEGIN
	UPDATE ORDERS
	SET COD_SUPPLIER = _COD_SUPPLIER,
		DAT_REQUIRED = _DAT_REQUIRED,
		COD_USER = _COD_USER,
		COD_STATUS = _COD_STATUS
	WHERE COD_ORDER = _COD_ORDER;
END;
//

-- INSERT EN LA TABLA DE `DETALLE DE PEDIDO`
DELIMITER //
CREATE PROCEDURE SP_INS_ORDER_DETAIL(
								IN
                                    _COD_PRODUCT BIGINT,
                                    _DES_ORDER TEXT,
                                    _CANT_PRODUCTS INT
)BEGIN
	-- INSERTAR A LA BASE DE DATOS --
	SET @COD_ORDER = (SELECT MAX(COD_ORDER) FROM ORDERS);

	INSERT INTO ORDER_DETAIL(COD_ORDER, COD_PRODUCT, DES_ORDER, CANT_PRODUCTS)
	VALUES(@COD_ORDER, _COD_PRODUCT, _DES_ORDER, _CANT_PRODUCTS);
END;
//

-- UPDATE EN LA TABLA `DETALLE DEL PEDIDO`
DELIMITER //
CREATE PROCEDURE SP_UPD_ORDER_DETAIL(
									IN
										_COD_DETAIL_ORDER BIGINT,
										_COD_PRODUCT BIGINT,
                                        _DES_ORDER TEXT,
                                        _CANT_PRODUCTS INT
)BEGIN
UPDATE ORDER_DETAIL
SET	COD_PRODUCT = _COD_PRODUCT,
    DES_ORDER = _DES_ORDER,
    CANT_PRODUCTS = _CANT_PRODUCTS
WHERE COD_DETAIL_ORDER = _COD_DETAIL_ORDER;
END;
//

DELIMITER //
CREATE PROCEDURE SP_SEL_ORDERS(
								IN _COD_ORDER BIGINT
)BEGIN
	IF _COD_ORDER = 0 THEN
		SELECT COD_ORDER, NAM_SUPPLIER, DAT_ORDER, DAT_REQUIRED, NAM_STATUS,
		CONCAT(FIRST_NAME, ' ', LAST_NAME) USER_NAME
		FROM ORDERS, SUPPLIER, USER, STATUS
		WHERE ORDERS.COD_SUPPLIER = SUPPLIER.COD_SUPPLIER
		AND ORDERS.COD_USER = USER.COD_USER
		AND ORDERS.COD_STATUS = STATUS.COD_STATUS;
	ELSE
		SELECT COD_ORDER, NAM_SUPPLIER, DAT_ORDER, DAT_REQUIRED, NAM_STATUS,
		CONCAT(FIRST_NAME, ' ', LAST_NAME) USER_NAME
		FROM ORDERS, SUPPLIER, USER, STATUS
		WHERE ORDERS.COD_SUPPLIER = SUPPLIER.COD_SUPPLIER
		AND ORDERS.COD_USER = USER.COD_USER
		AND ORDERS.COD_STATUS = STATUS.COD_STATUS
		AND COD_ORDER = _COD_ORDER;
	END IF;
END;
//

DELIMITER //
CREATE PROCEDURE SP_DEL_ORDERS(
								IN _COD_ORDER BIGINT
)BEGIN
	DELETE FROM ORDERS
    WHERE COD_ORDER = _COD_ORDER;
END;
//

DELIMITER //
CREATE PROCEDURE SP_SEL_ORDER_DETAIL(
								IN _COD_ORDER BIGINT
)BEGIN
	SELECT COD_DETAIL_ORDER, COD_ORDER, NAM_PRODUCT, DES_ORDER, CANT_PRODUCTS
	FROM ORDER_DETAIL, INVENTORY
	WHERE ORDER_DETAIL.COD_PRODUCT = INVENTORY.COD_PRODUCT
	AND COD_ORDER = _COD_ORDER;
END;
//

DELIMITER //
CREATE PROCEDURE SP_DEL_ORDER_DETAIL(
								IN _COD_DETAIL_ORDER BIGINT
)BEGIN
	DELETE FROM ORDER_DETAIL
    WHERE COD_DETAIL_ORDER = _COD_DETAIL_ORDER;
END;
//

/*###### MODULO DE PERSONAS #####*/

-- INSERT EN LA TABLA DE `PROVEEDOR`
DELIMITER //
CREATE PROCEDURE SP_INS_SUPPLIER( 
							   IN _NAM_SUPPLIER VARCHAR(255),
								_NAM_CONTACT VARCHAR(255),
								_LAST_NAM_CONTACT VARCHAR(255),
								_ADDRESS TEXT,
								_NUM_PHONE_ONE INT,
								_NUM_PHONE_TWO INT,
								_EMAIL VARCHAR (255),
								_NAM_CITY VARCHAR(255),
								_ZIP_CODE INT
)BEGIN
	 -- INSERT SUPPLIER
	INSERT INTO SUPPLIER (NAM_SUPPLIER, NAM_CONTACT, LAST_NAM_CONTACT, ADDRESS, NUM_PHONE_ONE, NUM_PHONE_TWO, EMAIL, NAM_CITY, ZIP_CODE)
	VALUES(_NAM_SUPPLIER, _NAM_CONTACT, _LAST_NAM_CONTACT, _ADDRESS, _NUM_PHONE_ONE, _NUM_PHONE_TWO, _EMAIL, _NAM_CITY, _ZIP_CODE);
END;
//

-- UPDATE EN LA TABLA DE `PROVEEDOR`
DELIMITER // 
CREATE PROCEDURE SP_UPD_SUPPLIER(

 						IN  _COD_SUPPLIER BIGINT,
							_NAM_SUPPLIER VARCHAR(255),
                            _NAM_CONTACT VARCHAR(255),
                            _LAST_NAM_CONTACT VARCHAR(255),
							_ADDRESS TEXT,
                            _NUM_PHONE_ONE INT,
							_NUM_PHONE_TWO INT,
                            _EMAIL VARCHAR (255),
                            _NAM_CITY VARCHAR(255),
                            _ZIP_CODE INT
)BEGIN
	 UPDATE SUPPLIER
	 SET NAM_SUPPLIER= _NAM_SUPPLIER,
		NAM_CONTACT= _NAM_CONTACT,
		LAST_NAM_CONTACT=_LAST_NAM_CONTACT,
		ADDRESS= _ADDRESS,
		NUM_PHONE_ONE=_NUM_PHONE_ONE,
		NUM_PHONE_TWO=_NUM_PHONE_TWO,
		EMAIL=_EMAIL,
		NAM_CITY =_NAM_CITY,
		ZIP_CODE=_ZIP_CODE
		WHERE COD_SUPPLIER= _COD_SUPPLIER;
END;
//

DELIMITER //
CREATE PROCEDURE SP_SEL_SUPPLIER (
						IN _COD_SUPPLIER  BIGINT
)BEGIN
          IF _COD_SUPPLIER = 0 THEN
		SELECT * FROM SUPPLIER;
		ELSE
		SELECT * FROM SUPPLIER
        WHERE COD_SUPPLIER = _COD_SUPPLIER;
    END IF;
END;
//

DELIMITER //
CREATE PROCEDURE SP_DEL_SUPPLIER (
						IN _COD_SUPPLIER  BIGINT
)BEGIN
       DELETE FROM SUPPLIER
       WHERE _COD_SUPPLIER= COD_SUPPLIER;
END;
//

-- INSERT EN LA TABLA DE `USUARIO`
DELIMITER //
CREATE PROCEDURE SP_INS_USER(
							IN 
							_IDENTITY BIGINT,
							_FIRST_NAME VARCHAR(255),
							_MIDDLE_NAME VARCHAR(255),
							_LAST_NAME VARCHAR(255),
							_GENDER ENUM('M','F','O'),
							_NUM_PHONE_ONE INT,
							_NUM_PHONE_TWO INT,
							_NUM_REFERENCE INT,
							_DAT_BIRTHDAY DATE,
							_NAM_CITY VARCHAR(255),
							_ADDRESS TEXT,
							_IMG_USER MEDIUMBLOB,
							_COD_ROLE BIGINT,
							_USER_EMAIL VARCHAR(255),
							_USER_PASSWORD VARCHAR(255)
)BEGIN
-- INSERT
	SET @EMAIL = (SELECT COUNT(COD_USER) FROM LOGIN WHERE USER_EMAIL = _USER_EMAIL);
	SET @COD_IDEN = (SELECT COUNT(COD_USER) FROM USER WHERE IDENTITY = _IDENTITY);
 
	 IF @EMAIL = 0 AND @COD_IDEN= 0 THEN
		INSERT INTO USER(IDENTITY, FIRST_NAME,MIDDLE_NAME,LAST_NAME, GENDER, NUM_PHONE_ONE, NUM_PHONE_TWO, NUM_REFERENCE, DAT_BIRTHDAY, NAM_CITY, ADDRESS, IMG_USER)
		VALUES (_IDENTITY, _FIRST_NAME, _MIDDLE_NAME, _LAST_NAME,_GENDER, _NUM_PHONE_ONE, _NUM_PHONE_TWO, _NUM_REFERENCE, _DAT_BIRTHDAY, _NAM_CITY, _ADDRESS, _IMG_USER);

		SET @COD_USER= (SELECT MAX(COD_USER) FROM USER);
        
		-- INSERTAR DATOS A LOGIN
		INSERT INTO LOGIN(COD_USER, COD_ROLE , USER_EMAIL, USER_PASSWORD) VALUES(@COD_USER, _COD_ROLE, _USER_EMAIL, _USER_PASSWORD); 
	ELSE 
		SIGNAL SQLSTATE  '45000'
		SET MESSAGE_TEXT= 'El usuario ya se encuentro registrado.';
	END IF;
END;
//

-- UPDATE EN LA TABLA DE `USUARIO`
DELIMITER //
CREATE PROCEDURE SP_UPD_USER(
							IN _COD_USER BIGINT,
								_IDENTITY BIGINT,
								_FIRST_NAME VARCHAR(255),
								_MIDDLE_NAME VARCHAR(255),
								_LAST_NAME VARCHAR(255),
								_GENDER ENUM('M','F','O'),
								_NUM_PHONE_ONE INT,
								_NUM_PHONE_TWO INT,
								_NUM_REFERENCE INT,
								_DAT_BIRTHDAY DATE,
								_NAM_CITY VARCHAR(255),
								_ADDRESS TEXT,
								_IMG_USER MEDIUMBLOB,
								_COD_ROLE BIGINT,
                                _USER_EMAIL VARCHAR(255),
                                _USER_PASSWORD VARCHAR(255)
)BEGIN
	UPDATE USER 
	SET
		IDENTITY = _IDENTITY,
		FIRST_NAME=_FIRST_NAME ,
		MIDDLE_NAME = _MIDDLE_NAME ,
		LAST_NAME=_LAST_NAME ,
		GENDER=_GENDER ,
		NUM_PHONE_ONE= _NUM_PHONE_ONE ,
		NUM_PHONE_TWO= _NUM_PHONE_TWO ,
		NUM_REFERENCE= _NUM_REFERENCE ,
		DAT_BIRTHDAY=_DAT_BIRTHDAY ,
		NAM_CITY=_NAM_CITY ,
		ADDRESS= _ADDRESS ,
		IMG_USER= _IMG_USER
	WHERE COD_USER=_COD_USER;
    
    UPDATE LOGIN
    SET COD_ROLE = _COD_ROLE,
    USER_EMAIL = _USER_EMAIL,
    USER_PASSWORD = _USER_PASSWORD
    WHERE COD_USER = _COD_USER;
END;
//

-- OBTENER TODOS LOS USUARIOS Y USUARIO POR ID
DELIMITER //
CREATE PROCEDURE SP_SEL_USER(
							IN _COD_USER BIGINT
)BEGIN
	IF _COD_USER = 0 THEN
		SELECT * FROM USER;
	ELSE
		SELECT * FROM USER
        WHERE COD_USER = _COD_USER;
    END IF;
END;
//

-- ELIMINAR USUARIO
-- 
DELIMITER //
CREATE PROCEDURE SP_DEL_USER(
							IN _COD_USER BIGINT
)BEGIN
	DELETE FROM USER
    WHERE COD_USER = _COD_USER;
END;
//

-- INSERT EN LA TABLA DE `CLIENTE`
DELIMITER //
CREATE PROCEDURE SP_INS_CLIENT(
						IN _IDENTITY BIGINT,
                        _FIRST_NAME VARCHAR(255),
                        _LAST_NAME VARCHAR(255),
                        _ADDRESS TEXT,
                        _NUM_PHONE_ONE INT,
                        _NUM_PHONE_TWO INT,
                        _RTN BIGINT
)BEGIN
	IF EXISTS (SELECT IDENTITY FROM CLIENT WHERE IDENTITY = _IDENTITY) OR (SELECT RTN FROM CLIENT WHERE RTN = _RTN) THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El cliente ya se encuentra registrado.';
    END IF;
    
    INSERT INTO CLIENT( IDENTITY, FIRST_NAME, LAST_NAME, ADDRESS, NUM_PHONE_ONE,NUM_PHONE_TWO,RTN)
	VALUES ( _IDENTITY,  _FIRST_NAME, _LAST_NAME, _ADDRESS, _NUM_PHONE_ONE, _NUM_PHONE_TWO, _RTN);
END;
//

 -- UPDATE EN LA TABLA DE `CLIENTE`                        
DELIMITER //
CREATE PROCEDURE SP_UPD_CLIENT(
							IN	_COD_CLIENT BIGINT,
							_IDENTITY BIGINT,
							_FIRST_NAME VARCHAR(255),
							_LAST_NAME VARCHAR(255),
							_ADDRESS TEXT,
							_NUM_PHONE_ONE INT,
							_NUM_PHONE_TWO INT,
							_RTN BIGINT
)BEGIN
		UPDATE CLIENT
		SET FIRST_NAME = _FIRST_NAME,
		LAST_NAME = _LAST_NAME,
		ADDRESS = _ADDRESS,
		NUM_PHONE_ONE = _NUM_PHONE_ONE,
		NUM_PHONE_TWO = _NUM_PHONE_TWO,
		RTN = _RTN
		WHERE COD_CLIENT=_COD_CLIENT;
END;
//

DELIMITER //
 CREATE PROCEDURE SP_SEL_CLIENT (
						IN _COD_CLIENT  BIGINT
)BEGIN
		IF _COD_CLIENT = 0 THEN
		SELECT * FROM CLIENT;
		ELSE
		SELECT * FROM CLIENT
        WHERE COD_CLIENT = _COD_CLIENT;
    END IF;
END;
//

DELIMITER //
 CREATE PROCEDURE SP_DEL_CLIENT (
						IN _COD_CLIENT  BIGINT
)BEGIN
       DELETE FROM CLIENT
       WHERE _COD_CLIENT= COD_CLIENT;
END;
//

/*###### MODULO DE PRODUCCIÓN #####*/

-- INSERT EN LA TABLA DE `INVENTARIO`
DELIMITER //
CREATE PROCEDURE SP_INS_INVENTORY(
							IN 	_COD_SUPPLIER BIGINT,
								_NAM_PRODUCT VARCHAR(255),
                                _DES_PRODUCT TEXT,
                                _ISV DECIMAL(3,2),
                                _NORMAL_UNIT_PRICE_1 DECIMAL(10,2),	
                                _NORMAL_UNIT_PRICE_2 DECIMAL(10,2),
                                _NORMAL_UNIT_PRICE_3 DECIMAL(10,2),
                                _WHOLESALE_CANT_1 DECIMAL(10,2),
                                _WHOLESALE_CANT_2 DECIMAL(10,2),
                                _WHOLESALE_PRICE_1 DECIMAL(10,2),
                                _WHOLESALE_PRICE_2 DECIMAL(10,2),
                                _PRICE_UNIT_PURCHASE DECIMAL(10,2),
                                _COD_TYP_PRODUCT BIGINT
)BEGIN
	-- INSERT EN LA BD--
	INSERT INTO INVENTORY(COD_SUPPLIER, NAM_PRODUCT,DES_PRODUCT, CANT_TOTAL, ISV, NORMAL_UNIT_PRICE_1, NORMAL_UNIT_PRICE_2, NORMAL_UNIT_PRICE_3, WHOLESALE_CANT_1, WHOLESALE_CANT_2, WHOLESALE_PRICE_1, WHOLESALE_PRICE_2, PRICE_UNIT_PURCHASE, COD_TYP_PRODUCT)
	VALUES (_COD_SUPPLIER, _NAM_PRODUCT,_DES_PRODUCT, 0, _ISV,_NORMAL_UNIT_PRICE_1,_NORMAL_UNIT_PRICE_2,_NORMAL_UNIT_PRICE_3,_WHOLESALE_CANT_1,_WHOLESALE_CANT_2,_WHOLESALE_PRICE_1,_WHOLESALE_PRICE_2,_PRICE_UNIT_PURCHASE, _COD_TYP_PRODUCT);
END;
//

-- UPDATE EN LA TABLA DE `INVENTARIO`
DELIMITER //  
CREATE PROCEDURE SP_UPD_INVENTORY (
							IN 	_COD_PRODUCT BIGINT,
								_COD_SUPPLIER BIGINT,
								_NAM_PRODUCT VARCHAR(255),
                                _DES_PRODUCT TEXT,
                                _ISV DECIMAL(3,2),
                                _NORMAL_UNIT_PRICE_1 DECIMAL(10,2),	
                                _NORMAL_UNIT_PRICE_2 DECIMAL(10,2),
                                _NORMAL_UNIT_PRICE_3 DECIMAL(10,2),
                                _WHOLESALE_CANT_1 DECIMAL(10,2),
                                _WHOLESALE_CANT_2 DECIMAL(10,2),
                                _WHOLESALE_PRICE_1 DECIMAL(10,2),
                                _WHOLESALE_PRICE_2 DECIMAL(10,2),
                                _PRICE_UNIT_PURCHASE DECIMAL(10,2),
                                _COD_TYP_PRODUCT BIGINT
)BEGIN
	 UPDATE INVENTORY 
	 SET COD_SUPPLIER = _COD_SUPPLIER,
		 NAM_PRODUCT =_NAM_PRODUCT,
		 DES_PRODUCT=_DES_PRODUCT,
		 ISV=_ISV,
		 NORMAL_UNIT_PRICE_1=_NORMAL_UNIT_PRICE_1,
		 NORMAL_UNIT_PRICE_2=_NORMAL_UNIT_PRICE_2,
		 NORMAL_UNIT_PRICE_3=_NORMAL_UNIT_PRICE_3,
		 WHOLESALE_CANT_1=_WHOLESALE_CANT_1,
		 WHOLESALE_CANT_2=_WHOLESALE_CANT_2,
		 WHOLESALE_PRICE_1=_WHOLESALE_PRICE_1,
		 WHOLESALE_PRICE_2=_WHOLESALE_PRICE_2,
		 PRICE_UNIT_PURCHASE= _PRICE_UNIT_PURCHASE,
		 COD_TYP_PRODUCT = _COD_TYP_PRODUCT
	 WHERE COD_PRODUCT = _COD_PRODUCT;
END;              
//

-- INSERT EN LA TABLA `DETALLE DE INVENTARIO`
DELIMITER //
CREATE PROCEDURE SP_INS_INVENTORY_DETAIL(
							IN _COD_PRODUCT BIGINT, 
							_DAT_PURCHASE DATE,
                            _DAT_EXP DATE,
                            _CANT_PRODUCTS DECIMAL(5,2),
                            _NUM_LOT INT,
                            _COD_ORDER BIGINT,
                            _COD_STATUS BIGINT
)BEGIN

-- INSERT EN LA BD--
	INSERT INTO INVENTORY_DETAIL (COD_PRODUCT,DAT_PURCHASE, DAT_EXP, CANT_PRODUCTS, NUM_LOT, COD_ORDER, COD_STATUS)
	VALUES (_COD_PRODUCT,_DAT_PURCHASE,_DAT_EXP,_CANT_PRODUCTS,_NUM_LOT, _COD_ORDER, _COD_STATUS);
    
	UPDATE INVENTORY
	SET CANT_TOTAL = CANT_TOTAL + _CANT_PRODUCTS
	WHERE COD_PRODUCT = _COD_PRODUCT;
END;
//

-- UPDATE EN LA TABLA DE `DETALLE DE INVENTARIO`
DELIMITER //
CREATE PROCEDURE SP_UPD_INVENTORY_DETAIL(
							IN _COD_DETAIL BIGINT,
                            _COD_PRODUCT BIGINT, 
							_DAT_PURCHASE DATE,
                            _DAT_EXP DATE,
                            _CANT_PRODUCTS INT (11),
                            _NUM_LOT BIGINT(20),
                            _COD_ORDER BIGINT,
                            _COD_STATUS BIGINT
)BEGIN
	UPDATE INVENTORY_DETAIL
	SET 
		COD_PRODUCT = _COD_PRODUCT,
		DAT_PURCHASE = _DAT_PURCHASE,
		DAT_EXP = _DAT_EXP,
		CANT_PRODUCTS = _CANT_PRODUCTS,
		NUM_LOT = _NUM_LOT,
		COD_ORDER = _COD_ORDER,
		COD_STATUS = _COD_STATUS
	WHERE COD_DETAIL = _COD_DETAIL;

	SET @CANT_TOTAL = (SELECT (SUM(CANT_PRODUCTS)) FROM INVENTORY_DETAIL WHERE COD_PRODUCT =_COD_PRODUCT);

	UPDATE INVENTORY
	SET CANT_TOTAL = @CANT_TOTAL 
	WHERE COD_PRODUCT = _COD_PRODUCT;

END;
//

  -- INSERT EN LA TABLA DE `MERMA`
DELIMITER //
CREATE PROCEDURE SP_INS_DECREASE(
							IN _COD_PRODUCT BIGINT,
                            _CONCEPT TEXT(20),
                            _CANT_PRODUCTS INT,
                            _NUM_LOT BIGINT (20),
                            _COD_USER BIGINT,
                            _DAT_DECREASE DATE
)BEGIN

	UPDATE INVENTORY_DETAIL
	SET CANT_PRODUCTS = CANT_PRODUCTS - _CANT_PRODUCTS
	WHERE COD_PRODUCT = _COD_PRODUCT
    AND NUM_LOT = _NUM_LOT;

	INSERT INTO DECREASE(COD_PRODUCT, CONCEPT, CANT_PRODUCTS, NUM_LOT, COD_USER, DAT_DECREASE)
	VALUES (_COD_PRODUCT, _CONCEPT, _CANT_PRODUCTS, _NUM_LOT, _COD_USER, CURDATE());
	
	SET @CANT_TOTAL = (SELECT (SUM(CANT_PRODUCTS)) FROM INVENTORY_DETAIL WHERE COD_PRODUCT =_COD_PRODUCT);

	UPDATE INVENTORY
	SET CANT_TOTAL = @CANT_TOTAL
	WHERE COD_PRODUCT = _COD_PRODUCT;

END;
//

-- UPDATE EN LA TABLA `MERMA`
DELIMITER //
CREATE PROCEDURE SP_UPD_DECREASE(
							IN _COD_DECREASE BIGINT,
                            _COD_PRODUCT BIGINT,
                            _CONCEPT TEXT,
                            _CANT_PRODUCTS INT,
                            _NUM_LOT BIGINT,
                            _COD_USER BIGINT
)BEGIN
	SET @MERMAS = (SELECT CANT_PRODUCTS FROM DECREASE WHERE COD_DECREASE = _COD_DECREASE);
    
	UPDATE INVENTORY_DETAIL
	SET CANT_PRODUCTS =  (@MERMAS + CANT_PRODUCTS) - _CANT_PRODUCTS
	WHERE COD_PRODUCT = _COD_PRODUCT
    AND NUM_LOT = _NUM_LOT;
    
    UPDATE DECREASE
	SET 	
		COD_PRODUCT = _COD_PRODUCT,
		CONCEPT = _CONCEPT,
		CANT_PRODUCTS = _CANT_PRODUCTS,
		NUM_LOT = _NUM_LOT,
        COD_USER = _COD_USER
	WHERE COD_DECREASE = _COD_DECREASE;
    
    SET @CANT_TOTAL = (SELECT (SUM(CANT_PRODUCTS)) FROM INVENTORY_DETAIL WHERE COD_PRODUCT = _COD_PRODUCT);

	UPDATE INVENTORY
	SET CANT_TOTAL = @CANT_TOTAL
	WHERE COD_PRODUCT = _COD_PRODUCT;

END;
//

-- INSERT EN LA TABLA `DEVOLUCIONES DE PRODUCTOS`
DELIMITER //
CREATE PROCEDURE SP_INS_RETURN_PRODUCT(
							IN  _COD_PRODUCT BIGINT,
                            _CONCEPT TEXT(20),
                            _CANT_PRODUCT INT,
                            _NUM_LOT INT,
                            _COD_USER BIGINT,
                            _MOVEMENT VARCHAR(255),
                            _DES_RETURN TEXT	
)BEGIN

	UPDATE INVENTORY_DETAIL
	SET CANT_PRODUCTS = CANT_PRODUCTS - _CANT_PRODUCT
	WHERE COD_PRODUCT = _COD_PRODUCT
    AND NUM_LOT = _NUM_LOT;

	-- INSERT EN LA BD--
	INSERT INTO RETURN_PRODUCT (COD_PRODUCT, CONCEPT,CANT_PRODUCT,NUM_LOT, COD_USER, MOVEMENT,DES_RETURN,DAT_RETURN)
	VALUES (_COD_PRODUCT,_CONCEPT,_CANT_PRODUCT,_NUM_LOT, _COD_USER, _MOVEMENT,_DES_RETURN, CURDATE());
    
    SET @CANT_TOTAL = (SELECT (SUM(CANT_PRODUCTS)) FROM INVENTORY_DETAIL WHERE COD_PRODUCT =_COD_PRODUCT);

	UPDATE INVENTORY
	SET CANT_TOTAL = @CANT_TOTAL
	WHERE COD_PRODUCT = _COD_PRODUCT;
END;
//

-- UPDATE EN LA TABLA `DEVOLUCIONES DE PRODUCTOS`
DELIMITER //
CREATE PROCEDURE SP_UPD_RETURN_PRODUCT(
							IN _COD_RETURN BIGINT, 
                            _COD_PRODUCT BIGINT,
                            _CONCEPT TEXT,
                            _CANT_PRODUCT INT,
                            _NUM_LOT INT,
                            _COD_USER BIGINT,
                            _MOVEMENT VARCHAR(255),
                            _DES_RETURN TEXT	
)BEGIN
	SET @DEVOLUCIONES = (SELECT CANT_PRODUCT FROM RETURN_PRODUCT WHERE COD_RETURN = _COD_RETURN);
    
	UPDATE INVENTORY_DETAIL
	SET CANT_PRODUCTS =  (@DEVOLUCIONES + CANT_PRODUCTS) - _CANT_PRODUCT
	WHERE COD_PRODUCT = _COD_PRODUCT
    AND NUM_LOT = _NUM_LOT;
    
    UPDATE RETURN_PRODUCT
	SET 	
		COD_PRODUCT = _COD_PRODUCT,
		CONCEPT = _CONCEPT,
		CANT_PRODUCT = _CANT_PRODUCT,
		NUM_LOT = _NUM_LOT,
        COD_USER = _COD_USER,
        MOVEMENT = _MOVEMENT,
        DES_RETURN = _DES_RETURN
	WHERE COD_RETURN = _COD_RETURN;
    
    SET @CANT_TOTAL = (SELECT (SUM(CANT_PRODUCTS)) FROM INVENTORY_DETAIL WHERE COD_PRODUCT = _COD_PRODUCT);

	UPDATE INVENTORY
	SET CANT_TOTAL = @CANT_TOTAL
	WHERE COD_PRODUCT = _COD_PRODUCT;
END;
//

-- #####
DELIMITER //
CREATE PROCEDURE SP_SEL_DECREASE(
						IN _COD_DECREASE BIGINT
)
BEGIN
	IF  _COD_DECREASE = 0 THEN
			SELECT * FROM DECREASE;
		ELSE 
			SELECT * FROM DECREASE
            WHERE COD_DECREASE = _COD_DECREASE;
	END IF;
END
//

DELIMITER //
CREATE PROCEDURE SP_SEL_INVENTORY(
						IN _COD_PRODUCT BIGINT
)
BEGIN
	IF  _COD_PRODUCT = 0 THEN
			SELECT * FROM INVENTORY;
		ELSE 
			SELECT * FROM INVENTORY 
            WHERE COD_PRODUCT = _COD_PRODUCT;
	END IF;
END
//

DELIMITER //
CREATE  PROCEDURE SP_SEL_INVENTORY_DETAIL(
						IN _COD_DETAIL BIGINT
)BEGIN
	IF  _COD_DETAIL = 0 THEN
			SELECT * FROM INVENTORY_DETAIL;
		ELSE 
			SELECT * FROM INVENTORY_DETAIL
            WHERE COD_DETAIL = _COD_DETAIL;
	END IF;
END
//

DELIMITER //
CREATE PROCEDURE SP_SEL_RETURN_PRODUCT(
						IN _COD_RETURN BIGINT
)BEGIN
	IF  _COD_RETURN = 0 THEN
			SELECT * FROM RETURN_PRODUCT;
		ELSE 
			SELECT * FROM RETURN_PRODUCT 
            WHERE COD_RETURN = _COD_RETURN;
	END IF;
END;
//

DELIMITER //
CREATE PROCEDURE SP_DEL_DECREASE(
						IN _COD_DECREASE BIGINT
)BEGIN 
			DELETE FROM DECREASE
            WHERE COD_DECREASE = _COD_DECREASE;
END;
//

DELIMITER //
CREATE PROCEDURE SP_DEL_INVENTORY(
						IN _COD_PRODUCT BIGINT
)BEGIN 
			DELETE FROM INVENTORY 
            WHERE COD_PRODUCT = _COD_PRODUCT;
END;
//

DELIMITER //
CREATE  PROCEDURE SP_DEL_INVENTORY_DETAIL(
						IN _COD_DETAIL BIGINT
)BEGIN 
			DELETE FROM INVENTORY_DETAIL
            WHERE COD_DETAIL = _COD_DETAIL;
END;
//

DELIMITER //
CREATE  PROCEDURE SP_DEL_RETURN_PRODUCT(
						IN _COD_RETURN BIGINT
)BEGIN 
			DELETE FROM RETURN_PRODUCT
            WHERE COD_RETURN = _COD_RETURN;
END;
//

/*###### MODULO DE CONTABILIDAD #####*/

-- INSERT EN LA TABLA DE `CUENTAS POR COBRAR`
DELIMITER //
CREATE PROCEDURE SP_INS_ACCOUNTS_RECEIVABLE(
					 IN _COD_INVOICE BIGINT,
						_DESCRIPTION TEXT,
                        _TOT_BALANCE DECIMAL(10,2),
                        _DAT_LIMIT DATE
)BEGIN
-- INSERTAR EN LA BASE DE DATOS
     INSERT INTO ACCOUNTS_RECEIVABLE(COD_INVOICE, DESCRIPTION, TOT_BALANCE, DAT_LIMIT)
     VALUES(_COD_INVOICE, _DESCRIPTION, _TOT_BALANCE, _DAT_LIMIT);
END;
//

-- INSERT EN LA TABLA DE `CUOTAS POR COBRAR`
DELIMITER // 
CREATE PROCEDURE SP_INS_FEES_RECEIVABLE(
						IN _COD_ACC_RECEIVABLE BIGINT,
                           _AMOUNT DECIMAL(10,2),
                           _DAT_PAY DATE,
                           _COD_TYP_PAY BIGINT
) BEGIN
   START TRANSACTION;
-- INSERTAR A LA BASE DE DATOS
   INSERT INTO FEES_RECEIVABLE(COD_ACC_RECEIVABLE, AMOUNT, DAT_PAY, COD_TYP_PAY)
   VALUES(_COD_ACC_RECEIVABLE, _AMOUNT, _DAT_PAY, _COD_TYP_PAY);
   
    IF _AMOUNT <= (SELECT TOT_BALANCE FROM ACCOUNTS_RECEIVABLE WHERE COD_ACC_RECEIVABLE = _COD_ACC_RECEIVABLE) THEN 
          UPDATE ACCOUNTS_RECEIVABLE
          SET TOT_BALANCE = TOT_BALANCE - _AMOUNT
		  WHERE COD_ACC_RECEIVABLE = _COD_ACC_RECEIVABLE;
          
		  COMMIT;
          
    ELSE
          ROLLBACK;
          SIGNAL SQLSTATE '45000'
		  SET MESSAGE_TEXT = 'La cuota de pago es mayor al saldo pendiente a pagar.';

    END IF;
   
  END;
//

-- INSERT EN LA TABLA DE `CUENTAS POR PAGAR`
DELIMITER //
CREATE PROCEDURE SP_INS_ACCOUNTS_TO_PAY(
					IN _COD_INVOICE BIGINT,
					   _DESCRIPTION TEXT,
                       _TOT_BALANCE DECIMAL(10,2),
                       _DATE_LIMIT DATE
) BEGIN
-- INSERTAR EN LA BASE DE DATOS
	 INSERT INTO ACCOUNTS_TO_PAY(COD_INVOICE, DESCRIPTION, TOT_BALANCE, DATE_LIMIT)
     VALUES(_COD_INVOICE, _DESCRIPTION, _TOT_BALANCE, _DATE_LIMIT);
 END;
// 

-- INSERT EN LA TABLA DE `CUOTAS POR PAGAR`
DELIMITER //
CREATE PROCEDURE SP_INS_FEES_TO_PAY(
					IN _COD_ACC_PAY BIGINT,
					   _AMOUNT DECIMAL(10,2),
                       _DATE_PAY DATE,
                       _COD_TYP_PAY BIGINT
) BEGIN
   START TRANSACTION;
   -- INSERTAR A LA BASE DE DATOS
    INSERT INTO FEES_TO_PAY(COD_ACC_PAY, AMOUNT, DATE_PAY, COD_TYP_PAY)
    VALUES(_COD_ACC_PAY, _AMOUNT, _DATE_PAY, _COD_TYP_PAY);
   
    IF _AMOUNT <= (SELECT TOT_BALANCE FROM ACCOUNTS_TO_PAY WHERE COD_ACC_PAY= _COD_ACC_PAY) THEN 
          UPDATE ACCOUNTS_TO_PAY
          SET TOT_BALANCE = TOT_BALANCE - _AMOUNT
		  WHERE COD_ACC_PAY = _COD_ACC_PAY;
          
		   COMMIT;
    ELSE
          ROLLBACK;
          SIGNAL SQLSTATE '45000'
		  SET MESSAGE_TEXT = 'La cuota de pago es mayor al saldo pendiente a pagar.';
    END IF;
  END;
//

-- INSERT EN LA TABLA `PLANILLA DE PAGOS`
DELIMITER //
CREATE PROCEDURE SP_INS_PAY_FORM(
                     IN _COD_USER BIGINT,
						_HOURS_WORKED INT,
                        _AMO_GROSS DECIMAL(10,2),
                        _BONUS DECIMAL(10,2),
                        _TOT_DEDUCTIONS DECIMAL(10,2),
                        _NET_SALARY DECIMAL(10,2),
                        _DAT_PAYMENT DATE
) BEGIN
  
  SET @USUARIOS = (SELECT COUNT(COD_USER) FROM PAY_FORM WHERE COD_USER = _COD_USER AND MONTHNAME(DAT_PAYMENT) = MONTHNAME(_DAT_PAYMENT) AND YEAR(DAT_PAYMENT)  = YEAR(_DAT_PAYMENT));
  
    IF @USUARIOS >= 1 THEN
      SIGNAL SQLSTATE '45000'
	  SET MESSAGE_TEXT = 'El usuario ya fue registrado durante este mes.';
    END IF;
    
	-- INSERTAR EN LA BASE DE DATOS
       INSERT INTO PAY_FORM(COD_USER, HOURS_WORKED, AMO_GROSS, BONUS, TOT_DEDUCTIONS, NET_SALARY, DAT_PAYMENT)
	   VALUES(_COD_USER, _HOURS_WORKED, _AMO_GROSS, _BONUS, _TOT_DEDUCTIONS, _NET_SALARY, _DAT_PAYMENT);
       
  END;
//

-- UPDATE EN LA TABLA `PLANILLA DE PAGOS`
DELIMITER //
CREATE PROCEDURE SP_UPD_PAY_FORM(
					IN _COD_PAY_FORM BIGINT,
                       _COD_USER BIGINT,
                       _HOURS_WORKED INT,
                       _AMO_GROSS DECIMAL(10,2),
                       _BONUS DECIMAL(10,2),
                       _TOT_DEDUCTIONS DECIMAL(10,2),
                       _NET_SALARY DECIMAL(10,2),
                       _DAT_PAYMENT DATE 
) BEGIN
        -- UPDATE EN LA BASE DE DATOS
           UPDATE PAY_FORM
           SET COD_USER = _COD_USER, HOURS_WORKED = _HOURS_WORKED, AMO_GROSS = _AMO_GROSS, BONUS = _BONUS, TOT_DEDUCTIONS = _TOT_DEDUCTIONS, NET_SALARY = _NET_SALARY, DAT_PAYMENT = _DAT_PAYMENT
           WHERE COD_PAY_FORM = _COD_PAY_FORM;
           
  END;
//

-- INSERT EN LA TABLA `DEVOLUCIONES SOBRE COMPRA/VENTA`
DELIMITER //
CREATE PROCEDURE SP_INS_RETURNS(
                     IN _COD_PRODUCT BIGINT, 
                        _DESCRIPTION TEXT, 
                        _CANT INT, 
                        _AMOUNT DECIMAL(10,2),
                        _TYP_RETURN ENUM('Venta', 'Compra'),
                        _COD_USER BIGINT, 
                        _DAT_RETURN DATE
) BEGIN
  -- INSERTAR EN LA BASE DE DATOS
	 INSERT INTO RETURNS(COD_PRODUCT, DESCRIPTION, CANT, AMOUNT, TYP_RETURN, COD_USER, DAT_RETURN)
     VALUES(_COD_PRODUCT, _DESCRIPTION, _CANT, _AMOUNT, _TYP_RETURN, _COD_USER, _DAT_RETURN);
  END;
//

-- UPDATE EN LA TABLA `DEVOLUCIONES SOBRE COMPRA/VENTA`
DELIMITER //
CREATE PROCEDURE SP_UPD_RETURNS(
                    IN _COD_RETURN BIGINT, 
                       _COD_PRODUCT BIGINT,
                       _DESCRIPTION TEXT, 
                       _CANT INT,
                       _AMOUNT DECIMAL(10,2),
                       _TYP_RETURN ENUM('Venta', 'Compra'),
                       _COD_USER BIGINT, 
                       _DAT_RETURN DATE
) BEGIN
    -- UPDATE EN LA BASE DE DATOS
       UPDATE RETURNS
       SET COD_PRODUCT = _COD_PRODUCT, DESCRIPTION = _DESCRIPTION, CANT = _CANT, AMOUNT = _AMOUNT, TYP_RETURN = _TYP_RETURN, COD_USER = _COD_USER, DAT_RETURN = _DAT_RETURN
       WHERE COD_RETURN = _COD_RETURN;
  END;
//

-- INSERT EN LA TABLA `REBAJAS SOBRE COMPRA/VENTA`
DELIMITER //
CREATE PROCEDURE SP_INS_DISCOUNTS(
                   IN _COD_PRODUCT BIGINT, 
				      _DESCRIPTION TEXT, 
					  _AMOUNT DECIMAL(10,2),
					  _TYP_SALES ENUM('Venta', 'Compra'),
					  _COD_USER BIGINT, 
					  _DAT_SALE DATE
) BEGIN
   -- INSERTAR EN LA BASE DE DATOS
      INSERT INTO DISCOUNTS(COD_PRODUCT, DESCRIPTION, AMOUNT, TYP_SALES, COD_USER, DAT_SALE)
	  VALUES(_COD_PRODUCT, _DESCRIPTION, _AMOUNT, _TYP_SALES, _COD_USER, _DAT_SALE);
  END; 
//

-- UPDATE EN LA TABLA `REBAJAS SOBRE COMPRA/VENTA`
DELIMITER //
CREATE PROCEDURE SP_UPD_DISCOUNTS(
					IN _COD_DISCOUNT BIGINT, 
                       _COD_PRODUCT BIGINT, 
                       _DESCRIPTION TEXT, 
                       _AMOUNT DECIMAL(10,2),
                       _TYP_SALES ENUM('Venta', 'Compra'),
                       _COD_USER BIGINT, 
                       _DAT_SALE DATE 
) BEGIN
  -- UPDATE EN LA BASE DE DATOS
     UPDATE DISCOUNTS
     SET COD_PRODUCT = _COD_PRODUCT, DESCRIPTION = _DESCRIPTION, AMOUNT = _AMOUNT, TYP_SALES = _TYP_SALES, COD_USER = _COD_USER, DAT_SALE = _DAT_SALE
     WHERE COD_DISCOUNT = _COD_DISCOUNT;
  END;
//

##### MODULO DE NOTIFICACIONES #####
DELIMITER //
CREATE PROCEDURE SP_SEL_NOTIFICATIONS(
									IN _COD_NOTIFICATION BIGINT
)BEGIN
	IF _COD_NOTIFICATION = 0 THEN
		SELECT NAM_ROLE, MESSAGE, TYP_NOTIFICATION, DAT_NOTIFICATION
        FROM ROLE, NOTIFICATIONS
        WHERE ROLE.COD_ROLE = NOTIFICATIONS.COD_ROLE;
	ELSE
		SELECT NAM_ROLE, MESSAGE, TYP_NOTIFICATION, DAT_NOTIFICATION
        FROM ROLE, NOTIFICATIONS
        WHERE ROLE.COD_ROLE = NOTIFICATIONS.COD_ROLE
        AND COD_NOTIFICATION = _COD_NOTIFICATION;
	END IF;
END;
//

DELIMITER //
CREATE PROCEDURE SP_INS_NOTIFICATIONS(
								IN _COD_ROLE BIGINT,
								   _MESSAGE TEXT,
                                   _TYP_NOTIFICATION VARCHAR(255)
)BEGIN
	-- INSERTAR NOTIFICACION
	INSERT INTO NOTIFICATIONS(COD_ROLE, MESSAGE, TYP_NOTIFICATION, DAT_NOTIFICATION)
    VALUES(_COD_ROLE, _MESSAGE, _TYP_NOTIFICATION, CURDATE());
END;
//

DELIMITER //
CREATE PROCEDURE SP_INS_USER_NOTIFICATIONS(
											IN _COD_USER BIGINT,
                                               _COD_NOTIFICATION BIGINT,
                                               _IS_VIEW ENUM('1', '0')
)BEGIN
	INSERT INTO USER_NOTIFICATIONS(COD_USER, COD_NOTIFICATION, IS_VIEW)
    VALUES(_COD_USER, _COD_NOTIFICATION, _IS_VIEW);
END;
//